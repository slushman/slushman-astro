[["Map",1,2,9,10,903,904],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.14.1","content-config-digest","1850cb63009a8459","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://www.slushman.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":true,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,26,27,40,41,52,53,68,69,81,82,95,96,109,110,123,124,144,145,157,158,184,185,203,204,224,225,214,238,255,256,216,280,296,297,266,309,327,328,218,340,356,357,368,369,62,381,395,396,408,409,170,431,450,451,464,465,172,477,496,497,168,509,178,528,547,548,559,560,176,578,197,597,611,612,624,625,424,637,654,655,669,670,683,684,270,696,714,715,272,727,274,743,195,761,138,773,174,789,268,808,826,827,136,837,422,853,420,870,134,887],"add-class-metabox",{"id":11,"data":13,"body":21,"filePath":22,"digest":23,"legacyId":24,"deferredRender":25},{"category":14,"description":16,"heroAccount":17,"heroPhotographer":18,"pubDate":19,"title":20},[15],"Code Samples","Toggling the visibility of a metabox using a form requires the metabox to have a custom class. This is how to add custom classes to a metabox.","noodle-kimm","noodle kimm",["Date","2012-09-08T00:00:00.000Z"],"How to Add a Class to a Metabox","While developing a new plugin, I needed to toggle the visibility of some metaboxes. The visibility of each metabox depends on the selected radio button in another metabox. In order to toggle the correct metabox, each metabox needs a distinct class. Check the code samples below for how to add a class to a metabox.\n\n## The Simple Way\n\n```php\n/**\n * The simplistic way to add a custom class to a specific metabox\n *\n * @param   array   $classes    The current classes on the metabox\n * @return  array               The modified classes on the metabox\n */\nfunction add_metabox_classes( $classes = array() ) {\n\n    return array_push( $classes, sanitize_html_class( 'my-custom-class' ) );\n\n} // add_metabox_classes()\n\n/**\n * post_type_name     The name of the post type\n * metabox_id         The ID attribute of the metabox\n */\nadd_filter( 'postbox_classes_{post_type_name}_{metabox_id}, 'add_metabox_classes' );\n```\n\nThe add_filter() statement works like this: replace `{post_type_name}` with the name of your post type. Then replace `{metabox_id}` with the metabox id for which you want to add a class.\n\nThe add_metabox_classes() function accepts the $classes array, which contains all the classes for the class attribute. In the function, we add a new class to the end of the array, then return it.\n\nNow, you're all finished. The metabox will have your new class and you can target it in a script. I'll write another tutorial on how to use jQuery to show or hide that metabox based on the value of the radio buttons.\n\nEDIT (4/7/2014):\n\nI've recently updated this method in four ways to make it simpler and easier. First of all, the $classes parameter passed in from WordPress is an array, so make sure the parameter itself is optional by assigning it as a blank array if its empty. Second, create an array of the class or classes you'd like to add. Third, check the existing $classes array to make sure you don't add a class that's already in there. Fourth, instead of using the array_push function, just assign it to the next place in the $classes array using the brackets after the variable.\n\n## The Thorough Way\n\nThe more thorough way checks if the class already exists in the metabox classes before adding it. Obviously, this is better, so use this method.\n\n```php\n/**\n * The more thorough way to add a custom class to a specific metabox\n *\n * Uses the same add_filter call, but its easier to add additional classes\n * and it checks if new class is already there.\n *\n * @param   array   $classes    The current classes on the metabox\n * @return  array               The modified classes on the metabox\n */\nfunction add_metabox_classes($classes = []) {\n\t$add_classes = ['new_class1', 'new_class2'];\n\n\tforeach ($add_classes as $class) {\n\t\tif (!in_array($class, $classes)) {\n\t\t\t$classes[] = sanitize_html_class($class);\n\t\t}\n\t} // End of foreach loop\n\n\treturn $classes;\n} // add_metabox_classes()\n\n/**\n * post_type_name     The name of the post type\n * metabox_id         The ID attribute of the metabox\n */\nadd_filter('postbox_classes_{post_type_name}_{metabox_id}, 'add_metabox_classes');\n```","src/content/blog/add-class-metabox.mdx","8807f19af97278c8","add-class-metabox.mdx",true,"artistdatapress-expiration",{"id":26,"data":28,"body":36,"filePath":37,"digest":38,"legacyId":39,"deferredRender":25},{"category":29,"description":31,"heroAccount":32,"heroPhotographer":33,"pubDate":34,"title":35},[30],"ArtistDataPress","In case you haven't heard, ArtistData is shutting down, so the ArtistDataPress plugin will also be shutting down as of October 14.","simbrock","Spencer Imbrock",["Date","2016-10-05T00:00:00.000Z"],"ArtistDataPress Expiration","In case you haven't heard, ArtistData is shutting down. Since ArtistDataPress merely re-displays the feed from ArtistData, the plugin will also be shutting down. The final date is October 14.\n\nI recommend checking out either BandsInTown or GigPress. BandsInTown covers the online service bit; GigPress keeps everything on your site. I've seen good results from both, so you can't lose.","src/content/blog/artistdatapress-expiration.mdx","dbfa9febd1a062cd","artistdatapress-expiration.mdx","add-jquery-ui-datepicker-plugin",{"id":40,"data":42,"body":48,"filePath":49,"digest":50,"legacyId":51,"deferredRender":25},{"category":43,"description":44,"heroAccount":45,"heroPhotographer":45,"pubDate":46,"title":47},[15],"Using a datepicker when choosing dates is a much nicer user experience. See the best way to add a jQuery DatePicker to a WordPress plugin.","rawpixel",["Date","2012-02-23T00:00:00.000Z"],"How to Add the jQuery UI Datepicker to a Plugin","**Updated - 4/14/2015**\n\nI've since learned a better way to do this. It essentially does the same thing, the same way, but using better WordPress practices. Use this updated code:\n\n```php\n/**\n * Adds the datepicker settings to the admin footer.\n * Only loads on the plugin-name settings page\n */\nfunction admin_footer() {\n\t$screen = get_current_screen();\n\n\tif ($screen->id == 'settings_page_plugin-name') {\n\t\t?>\u003Cscript type=\"text/javascript\">\n\t\t\tjQuery(document).ready(function(){\n\t\t\t\tjQuery('.datepicker').datepicker({\n\t\t\t\t\tdateFormat : 'D, m/d/yy'\n\t\t\t\t});\n\t\t\t});\n\t\t\u003C/script>\u003C?php\n\t}\n} // admin_footer()\nadd_action('admin_print_scripts', [$this, 'admin_footer'], 1000);\n\n/**\n * Enqueues the built-in Datepicker script\n * Only loads on the plugin-name settings page\n */\nfunction enqueue_scripts($hook_suffix) {\n\t$screen = get_current_screen();\n\n\tif ($screen->id == $hook_suffix) {\n\t\twp_enqueue_script('jquery-ui-datepicker');\n\t}\n} // enqueue_scripts()\nadd_action('admin_enqueue_scripts', [$this, 'enqueue_scripts']);\n\n/**\n * Enqueues a Datepicker theme\n * Only loads on the plugin-name settings page\n */\nfunction enqueue_styles($hook_suffix) {\n\t$screen = get_current_screen();\n\n\tif ($screen->id == $hook_suffix) {\n\t\twp_enqueue_style(\n\t\t\t'jquery.ui.theme',\n\t\t\tplugin_dir_url(__FILE__) . '/css/datepicker.css',\n\t\t\t['jquery-ui-core', 'jquery-ui-datepicker'],\n\t\t\t$this->version,\n\t\t\t'all'\n\t\t);\n\t}\n} // enqueue_styles()\nadd_action('admin_enqueue_scripts', [$this, 'enqueue_styles']);\n```\n\n[Gist of the code above](https://gist.github.com/slushman/8fd9e1cc8161c395ec5b)\n\n## Older Method\n\n![datepicker-head](/post/add-jquery-ui-datepicker-plugin/datepicker-head.jpg)\n\nI recently decided to dive into jQuery and figure out how to add a Datepicker to the Seminar system plugin I'm building for the Curb College at Belmont. Thankfully, I didn't need to write one from scratch because [jQuery UI](https://jqueryui.com/) already makes a great Datepicker and including it in a plugin is super easy. While I owe a great deal to [Zigpress's great tutorial](https://www.zigpress.com/2011/04/27/jquery-ui-datepicker-in-wordpress-admin/), the instructions are unfortunately outdated, so I'm going to update them here.\n\nWordPress 3.3 included the jQuery UI Datepicker by default. If you're not using that version or higher, update your WordPress install or you will need to include the files manually. In either case, you will need to include a theme for the Datepicker and add a few lines of code.\n\nFYI, the following code samples show functions and hook calls written within a class. Feel free to adapt as necessary for your code. First, in your \\_\\_construct() function, you'll need to add a few lines that tell the plugin to reference a function that will include the jQuery references.\n\n### **Add Actions**\n\n```php\n// Add jQuery calender\nadd_action('admin_print_scripts-post.php', [$this, 'seminar_scripts'], 1000);\nadd_action('admin_print_scripts-post-new.php', [$this, 'seminar_scripts'], 1000);\nadd_action('admin_footer', [$this, 'admin_footer']);\n```\n\nIn my plugin, I'm using the Datepicker for a meta box on the custom post type pages in the admin area, so I'm using the actions admin_print_scripts-post.php and admin_print_scripts-post-new.php and they both call the 'seminar_scripts' function. I also have the admin_footer action call the admin_footer function. Calling the Datepicker only on the required admin pages lowers the overhead for loading the Admin pages, keeping things as small as possible without sacrificing functionality.\n\n### **Enqueue the Script and Theme**\n\nNow we have to functions to define two functions: seminar_scripts() and admin_footer().\n\n```php\nfunction seminar_scripts() {\n   global $post_type;\n   if('cemb_seminar' != $post_type) { return; }\n   wp_enqueue_script('jquery-ui-datepicker');\n   wp_enqueue_style('jquery.ui.theme', plugins_url('/css/jquery-ui-1.8.17.custom.css', __FILE__));\n} // End of seminar_scripts()\n```\n\n`seminar_scripts()` starts by checking the post type. If we're not in the correct post type, (cemb_seminar is my custom post type - be sure to change this to match your plugin), then return. Otherwise, enqueue the Datepicker and its theme. Change the plugins_url() link to match your plugin folder structure.\n\n![jqui-theme](/post/add-jquery-ui-datepicker-plugin/jqui-theme.jpg)\n\nFor now (2/23/2012), you will need to include a theme for your Datepicker. WordPress doesn't include a theme for the Datepicker, but that should be resolved in a [coming update](https://core.trac.wordpress.org/ticket/18909). To get a theme, go to the jQuery UI [ThemeRoller](https://jqueryui.com/themeroller/), select the Gallery tab on the right sidebar, and choose your theme. I'm using [Smoothness](https://jqueryui.com/download/?themeParams=%3FffDefault%3DVerdana%2CArial%2Csans-serif%26fwDefault%3Dnormal%26fsDefault%3D1.1em%26cornerRadius%3D4px%26bgColorHeader%3Dcccccc%26bgTextureHeader%3D03_highlight_soft.png%26bgImgOpacityHeader%3D75%26borderColorHeader%3Daaaaaa%26fcHeader%3D222222%26iconColorHeader%3D222222%26bgColorContent%3Dffffff%26bgTextureContent%3D01_flat.png%26bgImgOpacityContent%3D75%26borderColorContent%3Daaaaaa%26fcContent%3D222222%26iconColorContent%3D222222%26bgColorDefault%3De6e6e6%26bgTextureDefault%3D02_glass.png%26bgImgOpacityDefault%3D75%26borderColorDefault%3Dd3d3d3%26fcDefault%3D555555%26iconColorDefault%3D888888%26bgColorHover%3Ddadada%26bgTextureHover%3D02_glass.png%26bgImgOpacityHover%3D75%26borderColorHover%3D999999%26fcHover%3D212121%26iconColorHover%3D454545%26bgColorActive%3Dffffff%26bgTextureActive%3D02_glass.png%26bgImgOpacityActive%3D65%26borderColorActive%3Daaaaaa%26fcActive%3D212121%26iconColorActive%3D454545%26bgColorHighlight%3Dfbf9ee%26bgTextureHighlight%3D02_glass.png%26bgImgOpacityHighlight%3D55%26borderColorHighlight%3Dfcefa1%26fcHighlight%3D363636%26iconColorHighlight%3D2e83ff%26bgColorError%3Dfef1ec%26bgTextureError%3D02_glass.png%26bgImgOpacityError%3D95%26borderColorError%3Dcd0a0a%26fcError%3Dcd0a0a%26iconColorError%3Dcd0a0a%26bgColorOverlay%3Daaaaaa%26bgTextureOverlay%3D01_flat.png%26bgImgOpacityOverlay%3D0%26opacityOverlay%3D30%26bgColorShadow%3Daaaaaa%26bgTextureShadow%3D01_flat.png%26bgImgOpacityShadow%3D0%26opacityShadow%3D30%26thicknessShadow%3D8px%26offsetTopShadow%3D-8px%26offsetLeftShadow%3D-8px%26cornerRadiusShadow%3D8px) because I think it most closely matches the WordPress Admin UI.\n\n![jqui-download](/post/add-jquery-ui-datepicker-plugin/jqui-download.jpg)\n\nClicking the Download button under a theme will take you to a page where you can select options for your jQuery UI download. Select your theme from the Theme drop menu, select the stable version, and click the Download button.\n\n![zip-folder](/post/add-jquery-ui-datepicker-plugin/zip-folder.jpg)\n\nWhen it finishes downloading, unzip the file and go to the css > smoothness folder. In my plugin, I've got a CSS folder. Drag the jquery-ui-1.8.17.custom.css file and images folder from the zip file into your plugin's CSS folder (or wherever you pointed the plugins_url() line in the enqueue statement in seminar_scripts()).\n\n### **Add the jQuery Script**\n\n```php\nfunction admin_footer() { ?>\n   \u003Cscript type=\"text/javascript\">\n      jQuery(document).ready(function(){\n         jQuery('.seminar_date').datepicker({\n            dateFormat : 'D, m/d/yy'\n         });\n      });\n   \u003C/script>\u003C?php\n} // End of admin_footer()\n```\n\nadmin_footer() includes the actual jQuery statement to make things happen on the page in the footer of your admin page. There are two things here you will need to customize for your plugin: the selector and the date format. jQuery works by looking at the page and finding a part of the page - aka the selector - and performing the script. My selector is the CSS class (.seminar_date) for the date field in the meta box. You'll need to modify that to match the CSS class (or ID) for your date field. The date format determines how the date appears on the page. For my plugin, I choose a format like Mon 2/22/2012. You can see [all the options](https://docs.jquery.com/UI/Datepicker/formatDate) for formatting dates.\n\nThat's it! Once you've added all that code and uploaded the jQuery UI theme, test it out and see the Datepicker appear when you click in the field you selected in the selector.","src/content/blog/add-jquery-ui-datepicker-plugin.mdx","9731d8f2448af3ec","add-jquery-ui-datepicker-plugin.mdx","add-select-menu-formidable-forms-customizer",{"id":52,"data":54,"body":64,"filePath":65,"digest":66,"legacyId":67,"deferredRender":25},{"category":55,"description":56,"heroAccount":57,"heroPhotographer":58,"pubDate":59,"relatedPosts":60,"title":63},[15],"Formidable is a great WordPress forms plugin, but it doesn't include a Customizer control for listing your forms. Here's I made one.","bearock","Yan Xiong",["Date","2016-07-18T00:00:00.000Z"],[61],{"id":62,"collection":9},"how-to-link-to-the-customizer","How to Add a Select Menu of Formidable Forms in Customizer","I recently had a need to list all the published Formidable forms as a select control in Customizer. Formidable doesn't spell out how to get this list, but I eventually stumbled on this method.\n\n```php\n$forms = FrmForm::get_published_forms();\n$choices = [];\n\nforeach ($forms as $form) {\n  $choices[$form->id] = $form->name;\n}\n\n// Formidable Forms Select Field\n$wp_customize->add_setting(\n\t'formidable_form_select',\n\t[\n\t\t'capability' => 'edit_theme_options',\n\t\t'default' => '',\n\t\t'transport' => 'postMessage',\n\t\t'type' => 'theme_mod'\n\t]\n);\n\n$wp_customize->add_control(\n\t'formidable_form_select',\n\t[\n\t\t'active_callback' => '',\n\t\t'choices' => $choices,\n\t\t'description' => esc_html__('', 'text-domain'),\n\t\t'label' => esc_html__('Formidable Forms Select', 'text-domain'),\n\t\t'priority' => 10,\n\t\t'section' => 'your-section',\n\t\t'settings' => 'formidable_form_select',\n\t\t'type' => 'select'\n\t]\n);\n\n$wp_customize->get_setting('formidable_form_select')->transport = 'postMessage';\n```\n\n[Gist of the code above](https://gist.github.com/slushman/c468381070f431d837afbf5af7e09247)\n\nBrief explanation\n\nUse the get_published_forms() static function in the FrmForm class from Formidable to get an array of public form objects.\n\nLoop through them and add each to the $choices array, which is used for the choices in the Customizer select control.\n\nThis control will return the form ID. You could tweak this to use the form key or any other data from the form object.","src/content/blog/add-select-menu-formidable-forms-customizer.mdx","8043cc0b80124f13","add-select-menu-formidable-forms-customizer.mdx","adding-custom-class-submit-button",{"id":68,"data":70,"body":77,"filePath":78,"digest":79,"legacyId":80,"deferredRender":25},{"category":71,"description":72,"heroAccount":73,"heroPhotographer":74,"pubDate":75,"title":76},[15],"Adding a custom class to a submit button can make certain designs easier to manage. Check out this super-simple solution.","coolmilo","camilo jimenez",["Date","2013-01-17T00:00:00.000Z"],"Adding a Custom Class to a Submit Button","While you can hand-code the HTML for a submit button in a form, WordPress has a nice function, [submit_button()](https://codex.wordpress.org/Function_Reference/submit_button), that echoes the correct code for you.\n\nFor a recent project, I wanted to restyle some buttons to make them look like links rather than buttons. While you don't NEED a special class to pull this off, it is easier and neater in the CSS. I thought this would be achievable in the $other_attributes. However, the $type parameter accepts any string, not just the WordPress defaults.\n\nWhatever you put there appears in the class attribute of the button. Then use that class to style the button however you wish!\n\n```php\n/**\n * Default WordPress submit() parameters\n *\n * @param  string  $text              changes the text on the button\n * @param  string  $type              determines the style of the button. WordPress styling options:\n *    primary - the default\n *    secondary\n *    delete\n *    custom - add your custom class for styling here!\n * @param  string  $name              sets the name attribute for the button, its \"Submit\" by default.\n * @param  string  $wrap              determines if the button is wrapped in paragraphs tags or not,\n *     the default is true.\n * @param  array   $other_attributes  sets other attributes for the button.\n */\nsubmit_button('Whatever Text', 'my-custom-class');\n```\n\n[Gist of the code above](https://gist.github.com/slushman/a32d7d8f5bbd4fa04602)","src/content/blog/adding-custom-class-submit-button.mdx","f98756019603c8e9","adding-custom-class-submit-button.mdx","change-mail-sound-office-2011-mac",{"id":81,"data":83,"body":91,"filePath":92,"digest":93,"legacyId":94,"deferredRender":25},{"category":84,"description":86,"heroAccount":87,"heroPhotographer":88,"pubDate":89,"title":90},[85],"IT","I really wanted to change the default 'new mail' sound in Outlook 2011 to a clip from Monty Python. This is how I made it work.","ugmonk","Jeff Sheldon",["Date","2010-10-28T00:00:00.000Z"],"How to Change the New Mail Sound in Office 2011 for Mac","![Outlook 2011 Icon](/post/change-mail-sound-office-2011-mac/outlook2011icon.jpg) I just got Office for Mac 2011 yesterday and I've been putting it through its paces. The new \"Ribbon\" doesn't seem intuitive yet, but that may just take time. Two things that I'd like to see improved:\n\n1. There's no way to create an automatic archive for back-ups like on the PC Outlook.\n2. There's no easy way to change the sound alerts.\n\nThis second one began to bother me today. Several years ago I started changing my new mail alert to a recording from Monty Python's Holy Grail. An arrow hits Sir Lancelot's trusty servant Concorde and he says \"Message for you, sir!\" I wanted to change that setting in Office for Mac 2011, but the alert options only has a checkbox - the alert is either on or off. After some googling and digging, here's how to customize your alerts sounds for Office for Mac 2011:\n\nClose Outlook\n\nOpen your hard drive and go to Applications > Microsoft Office 2011 > Office\n\n![Screenshot showing the package contents](/post/change-mail-sound-office-2011-mac/show-package-contents.png)\n\nRight-click (or control+click) on OutlookCore.framework and select Show Package Contents\n\n![Screenshot showing the WAV files in the package](/post/change-mail-sound-office-2011-mac/resources-wavs1.png)\n\nInside the Resources folder are the wav files for the alerts sounds. To change the \"new mail\" sound, we want to replace the newmail.wav file by renaming the new alert to the same name and copying it into this folder. Select to replace the file when asked.\n\nOpen Outlook\n\nNow, when you get a new message, it will play your new message wav instead of the default one. It would be nice if there was a way to do this without digging through framework files, but until then, this will work for you!","src/content/blog/change-mail-sound-office-2011-mac.mdx","136c2529d56b6a67","change-mail-sound-office-2011-mac.mdx","child-themes-woothemes",{"id":95,"data":97,"body":105,"filePath":106,"digest":107,"legacyId":108,"deferredRender":25},{"category":98,"description":100,"heroAccount":101,"heroPhotographer":102,"pubDate":103,"title":104},[99],"Development","Instead of altering an existing theme, the best practice is to create a child theme. This is the hidden secret to styling child themes for WooThemes.","sixstreetunder","Craig Whitehead",["Date","2014-09-08T00:00:00.000Z"],"Child themes for WooThemes","I've been using child themes for several years now, but I'd never used one with a theme by WooThemes. Most of my clients needed simple customizing, so I used WooTheme's backend options to make the changes.\n\nA recent client needed a bit more than I could do through their backend though. I started off making the customization directly in the theme, which is never a good idea. Catching my mistake, I decided to throw my changes in a child theme and work from there. However, when I reloaded after activating the child theme, the site broke. Looking at the source code, I noticed the order of the stylesheets. My child theme stylesheet should be last in the cascade, therefore overriding all other styles. There were two files from the parent theme loading after mine. I tried several solutions, hoping a [newer one](https://ulrich.pogson.ch/how-to-load-the-parent-styles-in-child-themes) using `wp_enqueue_style` to load the parent stylesheet instead of @import would work, but that didn't affect the other two stylesheets.\n\nThankfully (before pulling my hair out), I found [this page](https://support.woothemes.com/hc/en-us/articles/203105897-How-to-setup-and-use-a-child-theme) in the WooThemes support docs. What they don't spell out on the page is that you don't actually make CSS changes in the child theme style.css. You make a second CSS file called custom.css and make your changes there. The custom.css file loads next-to-last followed by styles put into their custom CSS field on the backend forms and therefore overrides all the other stylesheets.","src/content/blog/child-themes-woothemes.mdx","ba526263aef21407","child-themes-woothemes.mdx","class-based-react-components",{"id":109,"data":111,"body":119,"filePath":120,"digest":121,"legacyId":122,"deferredRender":25},{"category":112,"description":114,"draft":25,"heroAccount":115,"heroPhotographer":116,"pubDate":117,"title":118},[113],"React Basics","","brett_jordan","Brett Jordan",["Date","2022-08-12T00:00:00.000Z"],"Class-based React Components","## Classes\n\nWhy u\n\n## Lifecycle Functions\n\nhttps://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\n\n### Mounting\n\n#### Constructor\n\n#### getDerivedStateFromProps\n\n#### render\n\n#### componentDidMount\n\n### Updating\n\n#### getDerivedStateFromProps\n\n#### shouldComponentUpdate\n\n#### render\n\n#### getSnapshotBeforeUpdate\n\n#### componentDidUpdate\n\n### Unmounting\n\n#### componentWillUnmount\n\n## Error Handling\n\n### getDervicedStateFromError\n\n### componentDidCatch\n\n## Other Methods\n\n### setState\n\n### forceUpdate\n\n## Class Properties\n\n### defaultProps\n\n### displayName\n\n### props\n\n### state\n\n## Conclusion","src/content/blog/class-based-react-components.mdx","3f58f29337c52a8f","class-based-react-components.mdx","building-your-first-widget",{"id":123,"data":125,"body":140,"filePath":141,"digest":142,"legacyId":143,"deferredRender":25},{"category":126,"description":128,"heroAccount":129,"heroPhotographer":130,"pubDate":131,"relatedPosts":132,"title":139},[127],"Presentations","Watch the video of my presentation about building your first widget from WordCamp Nashville 2013. You can also follow along with the code samples.","bill_oxford","Bill Oxford",["Date","2013-04-21T00:00:00.000Z"],[133,135,137],{"id":134,"collection":9},"wordcamp-nashville-2013",{"id":136,"collection":9},"wordcamp-dayton-2015",{"id":138,"collection":9},"using-wordpress-plugin-boilerplate","Building Your First Widget","So, I spoke at WordCamp Nashville today and I had an absolute blast! The other sessions were very informative, I especially enjoyed learning about some tools for debugging plugins and themes. My session was the last one in the developer track. You can download my boilerplate widget code using the nice, giant green button on my home page or the link below. Here are my slides, I hope you learn something new:\n\n**[Building Your First Widget](https://www.slideshare.net/christopherjoelwilcoxson/building-your-first-widget \"Building Your First Widget\")** from **[Chris Wilcoxson](https://www.slideshare.net/christopherjoelwilcoxson)**\n\n[Check out the slides](/presentations/building-your-first-widget)\n\n[Download the Boilerplate Widget code](https://github.com/slushman/slushman-boilerplate-widget/archive/master.zip)","src/content/blog/building-your-first-widget.mdx","a4dcef1a6af0bbe0","building-your-first-widget.mdx","avoiding-get_theme_mod-errors",{"id":144,"data":146,"body":153,"filePath":154,"digest":155,"legacyId":156,"deferredRender":25},{"category":147,"description":148,"heroAccount":149,"heroPhotographer":150,"pubDate":151,"title":152},[15],"If you're getting an error related to the get_theme_mod function, the solution is simpler than you think. Check out this solution.","korpa","JR Korpa",["Date","2015-04-16T00:00:00.000Z"],"Avoiding get_theme_mod Errors","If you're getting an error related to [get_theme_mod](https://developer.wordpress.org/reference/functions/get_theme_mod/), its most likely from how you're checking if the returned result is empty. Most developers will probably do the same thing I did: make a variable and assign it to the result of get_theme_mod. Then check if its empty using PHP's [empty()](https://php.net/manual/en/function.empty.php) method. Sadly, this is where you're getting an error. Instead, check if the result is equal to '', or blank.\n\n```php\n/**\n * Do this\n */\nif ('' === get_theme_mod('something')) { ... }\n\n/**\n * Not this\n */\nif (empty(get_theme_mod('something'))) { ... }\n```\n\n[Gist of the code above](https://gist.github.com/slushman/42b281e4a7b368052e6f)","src/content/blog/avoiding-get_theme_mod-errors.mdx","98725c8d9c4a40ab","avoiding-get_theme_mod-errors.mdx","creating-a-baseline-for-parker",{"id":157,"data":159,"body":180,"filePath":181,"digest":182,"legacyId":183,"deferredRender":25},{"category":160,"description":162,"heroAccount":163,"heroPhotographer":164,"pubDate":165,"relatedPosts":166,"title":179},[161],"Parker","In order to optimize the Underscores stylesheet using the CSS tool Parker, we need to start by creating a baseline, so we can compare the changes.","elisamichelet","Elisa Michelet",["Date","2016-10-25T00:00:00.000Z"],[167,169,171,173,175,177],{"id":168,"collection":9},"parker-and-wordpress-theme-development",{"id":170,"collection":9},"installing-parker",{"id":172,"collection":9},"improving-underscores-stylesheet-using-parker",{"id":174,"collection":9},"simplifying-wordpress-menu-styling",{"id":176,"collection":9},"results-underscores-stylesheet",{"id":178,"collection":9},"parker-wordpress-menus","Creating a Baseline for Parker","In the [previous post](/post/installing-parker/) in this [series about Parker](/post/parker-and-wordpress-theme-development/), we installed the stylesheet analysis tool and all its dependencies. Now, we're going to create a baseline measurement of the default \\_s stylesheet and explain the results from Parker.\n\n## Create a Baseline\n\nFirst, open Finder/Windows Explorer and navigate to the folder where you cloned \\_s. Open Terminal (or your preferred command line app), type in:\n\n```shell\nparker\n```\n\nNote the space at the end! Drag the \\_s stylesheet file to Terminal. This puts the path to the stylesheet in Terminal. Hit enter to run Parker. The results will be something like this:\n\n```shell\nPARKER-JS\n\nTotal Stylesheets: 1\n\nTotal Stylesheet Size: 15432\n\nTotal Rules: 134\n\nTotal Selectors: 280\n\nTotal Identifiers: 508\n\nTotal Declarations: 243\n\nSelectors Per Rule: 2.08955223880597\n\nIdentifiers Per Selector: 1.8285714285714285\n\nSpecificity Per Selector: 10.446428571428571\n\nTop Selector Specificity: 120\n\nTop Selector Specificity Selector: #content[tabindex=\"-1\"]:focus\n\nTotal Id Selectors: 1\n\nTotal Unique Colors: 15\n\nUnique Colors: #FFFF00,#000000,#C0C0C0,#404040,#EEEEEE,#666666,#FFF9C0,#FFFFFF,#CCCCCC,#BBBBBB,#E6E6E6,#AAAAAA,#111111,#F1F1F1,#21759B\n\nTotal Important Keywords: 2\n\nTotal Media Queries: 1\n\nMedia Queries: screen and (min-width: 37.5em)\n```\n\nBefore we move on, let's briefly go through the terminology in the results so we understand everything and what may need to change.\n\n### Selector vs Declaration vs Identifier vs Rule\n\nIf you're like me and find all the terms confusing, this diagram maps it out. At minimum, I'm adding this for my future self who doesn't remember what's what.\n\n![This entire thing is a rule.](/post/creating-a-baseline-for-parker/Parker-CSS-Parts.jpg \"Parker CSS Parts\")\n\n## Parker Results, Explained\n\n### Total Stylesheets\n\nThe total quantity of stylesheets Parker examined. You can add multiple stylesheets at once and Parker will spit out results for all of them. If you do examine multiple stylesheets at once, Parker combines the results into one set of results. I'd advise testing each sheet separately.\n\n### Total Stylesheet Size\n\nThe size, in bytes, of the stylesheet. While there's not really an \"ideal\" size, smaller is better.\n\n### Total Rules\n\nThe total quantity of CSS rules in the stylesheet. A \"rule\" is the selector and the styles applied to it. There's not an ideal number of total rules to achieve, but a smaller number means the stylesheet is simpler.\n\n### Total Selectors\n\nThe total quantity of selectors used in the stylesheet. Selectors are combinations of identifiers for selecting an element on the site to which styles are applied. There's not an ideal number of total selectors to achieve, but a smaller number means the stylesheet is simpler. Here are some examples, each of these counts as one selector:\n\n- .this-is-a-class\n- .this-is-a-class a\n- .this-is-a-class a:hover\n- .main-navigation ul ul ul li a\n\n### Total Identifiers\n\nThe total quantity of identifiers used in the stylesheet. Not to be confused with IDs, identifiers are each part of a selector. There's not an ideal number of total identifiers to achieve, but a smaller number means the stylesheet is simpler. Here are some examples with their identifier count:\n\n- .this-is-a-class - 1\n- .this-is-a-class a - 2\n- .this-is-a-class:hover- 2 (pseudo selectors count separately)\n- .main-navigation ul ul ul li a - 6\n\n### Total Declarations\n\nThe total quantity of declarations in the stylesheet. Declarations are the CSS property and value. There's not an ideal number of total declarations to achieve, but a smaller number means the stylesheet is simpler. An example declaration is:\n\n```css\ncolor: #fff;\n```\n\n### Selectors Per Rule\n\nThe total quantity of selectors used in each rule. Rules can apply to more than one selector, like \".this-is-a-class, .this-is-another-class\". This metric shows the mean of selectors used for each rule. Ideally, this number would 1 and each class would be reusable and only contain the styles needed for that class. This is one of those opinionated things I mentioned before. In Harry's opinion, using multiple selectors like this should be avoided:\n\n```css\nbutton,\n[type=\"button\"],\n[role=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"]\n```\n\nWe should create a single class and apply that class to all elements requiring those styles. However, as theme developers, we are often stuck having to cover all possible bases, since we can't control the code output from plugins and sometimes WordPress itself.\n\nThe ideal for this value is 1, but I would advise getting as close to 1 as possible. Getting this number under 2 is doing really well.\n\n### Identifiers Per Selector\n\nThe total quantity of identifiers per selector. An ideal value is between 1 & 2. A single identifier per selector makes the minimum score of 1: \".this-is-a-class\" is one identifier and one selector. This is one of the more challenging metrics to achieve the ideal score since we can't control the code and classes we get from plugins and sometimes WordPress. Particularly, the default WordPress menu classes cause many developers to use selectors like: \".nav-primary ul ul ul li a\". While this gets the job done, it also results in an abysmal score for this metric: 6. Later, we'll go over a method to reduce this particular selector down to a 1.\n\n### Specificity Per Selector\n\nThe mean of the specificity score of each selector. The easiest way to explain specificity is through examples:\n\n```css\na {\n  color: #000;\n}\n```\n\nApplies to all links, so it's not very specific.\n\n```css\n.link-to-home {\n  color: #000;\n}\n```\n\nApplies to any element with the class \"link-to-home\". More specific than styling all the \"a\" tags, but less specific than using an ID.\n\n```css\n#link-to-home {\n  color: #000;\n}\n```\n\nOnly applies to the element with the ID \"link-to-home\". There should only be one of these elements, so it is extremely specific.\n\nParker is intended to help make your CSS classes reusable, so your specificity score should be as low as possible. This means your styles are reusable and don't apply to super-specific elements. Typically, between 10 and 20 is doing pretty well, since we'll mostly use classes for applying styles. Here's the scoreboard used by Parker:\n\n- Universal selectors (like \\*): 0\n- Element selectors (like input or a): 1\n- Classes, attributes, and pseudo selectors: 10\n- IDs: 100\n\n### Top Selector Specificity\n\nThe highest specificity score in the stylesheet. There's not really an ideal, but I'd say if you're most specific selector is 30 or less, you're doing pretty good.\n\n### Top Selector Specificity Selector\n\nThe selector with the highest specificity score in the stylesheet. This makes is easier to find the \"worst offender\" and refactor your code to eliminate it.\n\n### Total Id Selectors\n\nTotal quantity of IDs used in the stylesheet. Ideally, this is 0 since we shouldn't style using IDs - they are too specific and the style rule cannot be reused.\n\n### Total Unique Colors\n\nThe total quantity of colors used in the stylesheet. This could be useful to spot small color variances (like multiple shades of light gray) and refactor them to use fewer colors throughout. A stylesheet with fewer colors is a simpler stylesheet.\n\n### Unique Colors\n\nA comma-separated list of all the color codes used in the stylesheet.\n\n### Total Important Keywords\n\nThe total quantity of the use of \"!important\" in the stylesheet. Ideally, this number would be 0, but there are still [valid uses of !important](https://csswizardry.com/2016/05/the-importance-of-important/), so make sure your usage is justified.\n\n### Total Media Queries\n\nThe total quantity of media queries in the stylesheet. There's no ideal number, but a smaller number of total media queries means a simpler stylesheet.\n\n### Media Queries\n\nA comma-separated list of all the media queries used in the stylesheet. Useful for refactoring media queries for simplicity.\n\n## Wrapping Up\n\nNow that we've learned what each result from Parker means and the ideal scores for each metric, we can start tweaking the \\_s stylesheet to get better scores and create a simpler, more maintainable stylesheet. In the [next post](/post/improving-underscores-stylesheet-using-parker/), we'll cover some easy wins to get closer to our goal.","src/content/blog/creating-a-baseline-for-parker.mdx","290cbb5b3a7aa05f","creating-a-baseline-for-parker.mdx","developer-interviews",{"id":184,"data":186,"body":199,"filePath":200,"digest":201,"legacyId":202,"deferredRender":25},{"category":187,"description":189,"draft":25,"heroAccount":190,"heroPhotographer":191,"pubDate":192,"relatedPosts":193,"title":198},[188],"Job","What is a typical process for interviewing for a developer position? Why do companies do it that way?","zayyerrn","Ahmed Zayan",["Date","2022-07-22T00:00:00.000Z"],[194,196],{"id":195,"collection":9},"web-developer-job",{"id":197,"collection":9},"resumes-and-cover-letters","Developer Interviews","In my previous post, we went over creating your resume and writing the cover letter. But what happens after that? If you have what the employer is looking for, you may get an interview.\n\n## The Process\n\nThe process is most likely multiple interviews. Many companies have created a multi-layered filtration process to find the right person for each position. In some cases, they use Artificial Intelligence to sort through the submitted resumes looking for what they want.\n\nThe better companies communicate their process up front, letting you know what to expect. In my case, they had a four-part process and made sure I was aware of every step in advance. They wanted me to succeed and made sure the process was as smooth as possible.\n\n## Recruiter Interview\n\nMost hiring processes start as a series of conversations with a recruiter. In my case, it happened to be the department manager. He asked about my experience and skills while I asked about a typical day of a developer at the company. Sometimes, this process is multiple conversations or a single one, depending on the company.\n\n## Technical Evaluation and/or Interview\n\nIf the recruiter gives you the go-ahead, most companies have a technical evaluation to determine your skill level. Some companies go straight to a technical interview.\n\n### Technical Evaluation\n\nEvery company does this differently. In our case, our company has a starter project where we ask you to complete a few features. We also list some optional tasks to complete if you have time, like tests. Once completed, our developers review the code to assess your skill level.\n\n### Pairing Session\n\nSometimes, we send the project in advance and schedule a pairing session with a developer. We want to understand why you code the way you do and see your decision-making process. The pairing session often tells us more about you as both a developer and a person versus a project you turn in.\n\n### Technical Interview\n\nAfter I turned in a project, I talked with several developers and answered technical questions about React, coding practices, and how I solved problems.\n\nSome companies ask more esoteric questions about algorithms or university-level book knowledge that you will most likely not use in your day-to-day work. Thankfully, I have not endured one yet.\n\nMy advice is to take the project and technical interview seriously. I have reviewed many evaluation projects that seemed like the interviewee did not care. Instead, knock their socks off. Go above what they ask for and show them what you can do.\n\n### Cultural Interview\n\nAfter this, there was a group interview with people not in my department. The idea was to involve people outside engineering to ensure the interviewee was a good fit for the company. The name can be a little misleading, so let me explain.\n\nCulture, in this case, is not about being a comic book nerd, what kind of food you like, or which holidays you celebrate. It is about how and why you get your work done and if your work values match everyone else at the company. This part varies widely between companies, but they may include things like:\n\n- Fight for a good experience - even though you may have a great idea, it might be the best thing for the end-user, so work for what is best for them.\n- Be teachable - know that you do not know everything and that it is ok. Remaining humble helps you work better with others because you know they do not know everything either. Help others learn as they help you learn.\n\nOther considerations could be:\n\n- work-from-home vs in-office/on-site\n- deadline-driven versus product-driven\n\nHaving one work-related value versus the other is not wrong, but if you and the company have opposite work values, you are less likely to be a happy, long-term employee. That, in turn, costs the company more money by repeating the hiring process with someone else later. It is cheaper, easier, and better to hire a good fit over someone who is merely qualified.\n\n#### Examples\n\nHere are some cultural values from large tech companies:\n\nApple\n\n- Top-notch excellence, in particular with product design and experience\n- Creativity, think different\n- Innovation, specifically rapid innovation to bring new, exciting products to market quickly\n- Secrecy, minimize corporate espionage and only debut products that are ready for sale\n- Moderate combativeness, although this has toned down under Tim Cook's leadership\n- In-office work preferred\n\nGoogle\n\n- Openness, share knowledge freely with other employees and encourage communication\n- Innovation, out-of-the-box thinking and inventing new solutions\n- Excellence that comes with smartness, work smarter not harder\n- Hands-on approach, experiantial learning is the best way to improve knowledge, skills, and abilities\n- Small-company-family rapport, especially at the department and workspace levels\n- In-office work preferred\n\nFacebook\n\n- Creative problem solving and decision-making, generate unusla ideas to solve problems\n- Boldness, face problems head-on and tackle them right away\n- Openness, communicate openly with other employees to focus on solutions to the business's problems\n- Speed, smal lteams, high flexibility, and rapid development\n- Continuous improvement, continually iterate and improve\n- Work from wherever\n\n## Leadership Interview\n\nTypically, this would be one of the final steps. The management and leadership get to know you a little and see if they spot any red flags.\n\n## What’s Next?\n\nAfter all these interviews, there’s usually a meeting where everyone talks over their conversations with you. The main point of this meeting is to discuss any red flags we spotted. We want the interviewee to be successful, but we also want to protect our company and hire the best possible employee.\n\nAfter this meeting, the recruiters, management, and HR discuss if they want to offer you the position.\n\n## Onboarding\n\nIf you get the job offer, your company should have a clear path forward for starting your new career. At my company, we call this onboarding.\n\nWhen I started my current position, they laid out how they expected my first year or so to look. It went something like:\n\nFirst month:\n\n- HR stuff\n- Get set up with the development environment\n- Pair with an onboarding buddy\n- Meet with department leaders to learn more about the product and architecture\n- Work on an onboarding project of some kind, depending on experience and need\n- Work with onboarding buddy to commit some low-level contribution\n\nBy month three:\n\n- Finish onboarding project\n- Begin working with a team and learning their area of work\n- Work with onboarding buddy to begin contributing\n\nBy month six:\n\n- Work with the team and participate in the team meetings, like estimations, retros, and stand-ups\n- Familiar with at least one area of the software\n\nBy one year:\n\n- Fully integrated and ready to take in any incoming work\n- Could help someone else onboard\n\nThis process will also vary between companies. I know some expect you to start contributing as soon as your computer is ready. The onboarding project can also vary based on your experience; a more senior engineer will probably want to jump into real work sooner than a more junior one.\n\nSome job postings include these expectations, which gives me confidence they have thought about how to help someone have a successful career there.\n\n## What to do if you do not get the job\n\nMost people do not make it through one of those filtering layers. If you are in that position, I would advise you not to give up. You will be happier and more successful at another company.\n\n## Conclusion\n\nInterviews are a learnable skill to master. Some people do this naturally; some do not. Either way, keep working on your skills while applying for different positions.\n\nThanks for reading this short series on web development jobs; I hope it’s helpful.","src/content/blog/developer-interviews.mdx","edaf447def70866e","developer-interviews.mdx","editor-links-for-headless-wordpress-themes",{"id":203,"data":205,"body":220,"filePath":221,"digest":222,"legacyId":223,"deferredRender":25},{"category":206,"description":208,"heroAccount":209,"heroPhotographer":210,"pubDate":211,"relatedPosts":212,"title":219},[207],"Headless WordPress","While creating a headless front-end for my WordPress site, the links in the editor needed to customized to work correctly. Here's how I solved it.","joshstyle","JOSHUA COLEMAN",["Date","2018-08-22T00:00:00.000Z"],[213,215,217],{"id":214,"collection":9},"deploying-a-react-app-to-netlify",{"id":216,"collection":9},"headless-theme-for-wordpress",{"id":218,"collection":9},"headless-wordpress-create-react-app","Editor Links for Headless WordPress Themes","In my [previous post](/post/headless-wordpress-create-react-app/), I talked about creating a headless front end for WordPress using Create React App. Turning my WordPress site into a headless React app was a massive learning experience. There were many challenges, like learning React, then learning the REST API, and creating custom endpoints. I won't even mention battling CORS headers. One of the more interesting issues I ran into, with editor links, ultimately had a very simple solution.\n\n## The Problem\n\nMy WordPress install lives at api.slushman.com and my live site (the part you're reading now) lives at slushman.com. So when I'm writing content in WordPress and link to another post on my site, it creates a little problem. Should I link to api.slushman.com/something? Ideally, I'd link to slushman.com/something since readers would visit that page. The question is: how can I link to the live domain while the site exists on another domain? I'd like to avoid manually editing every single link, especially for all the existing posts.\n\n## The Solution\n\nThankfully, the solution was much simpler than I originally thought. In my mind, this problem was an insurmountable monster. But WordPress solved this problem years ago. Before the REST API existed, people wanted to install WordPress in a subfolder so all the files don't clutter up their site's root folder. But they wanted the WordPress content to appear like it was just part of the rest of the site. The solution for this problem also solves the editor links problem for a headless front end.\n\n### Change URL Settings\n\nIn the admin, on the Settings > General page, there are two fields for a URL:\n\n- WordPress Address\n- Site Address\n\nSince most every site I've worked on used WordPress to both manage and display the content, these settings have always been the same. However, since the front end and back end are on two different URLs, they need to be different values.\n\nWordPress Address is the URL where your WordPress install lives. In this case, this is my WordPress backend, so the correct value is api.slushman.com.\n\nSite Address is the URL for the viewable site. Since I'm going headless, this setting would be slushman.com. WordPress uses this value when creating editor links. So now when I create a link within the editor to another page or post within the site, the link goes to slushman.com.\n\n![Site settings in WordPress](/post/editor-links-for-headless-wordpress-themes/site-settings-wordpress.png)\n\nThe other big upside is all the links I've already created in past posts point to valid locations within my headless front end. If someone tries to visit my WordPress backend, the browser redirects to the same requested location on the front end.\n\n## Coming Up\n\nThose redirects happen in my Headless Theme. But wait, why would I have a theme in WordPress if it's not displaying any content? In my next post, I'll talk through the details of my [Headless WordPress Theme](/post/headless-theme-for-wordpress/) and why you still need a theme.","src/content/blog/editor-links-for-headless-wordpress-themes.mdx","3c38f47e9c3c0767","editor-links-for-headless-wordpress-themes.mdx","code-and-pre-styling",{"id":224,"data":226,"body":234,"filePath":235,"digest":236,"legacyId":237,"deferredRender":25},{"category":227,"description":229,"heroAccount":230,"heroPhotographer":231,"pubDate":232,"title":233},[228],"Design","While redesigning my site, I wanted to customize the way code samples are displayed. Let's look at the options I explored.","markusspiske","Markus Spiske",["Date","2018-05-23T00:00:00.000Z"],"Code Sample Styling","import Codepen from \"../../components/Codepen.astro\";\nimport ExistingIdeasGallery from \"../../galleries/ExistingIdeasGallery.astro\";\nimport LibraryGallery from \"../../galleries/LibraryGallery.astro\";\n\nI'm starting the process of redesigning this site. One of the components I have found most difficult to style are the code samples. Unfortunately, finding examples of what other people have done is not simple since googling words like \"code\", \"HTML\", \"CSS\", \"styling\", \"code sample\", and/or \"pre\" result in all kinds of randomness. So I thought it would be helpful to publish what I've found so far in case anyone else wants inspiration or to explore possibilities.\n\n## Examples from Known Libraries\n\nI believe there's wisdom in listening to experts first, since (hopefully) they have already figured out all the things. In this case, I wanted to see the designs created by popular CSS libraries. Specifically, I wanted to see how these libraries style pre and code elements out-of-the-box.\n\nNOTE: I'm combining the styling for both the `\u003Cpre />` and `\u003Ccode />` elements here since I want to display a code sample (which uses both elements). I did not use any reset tools on these examples.\n\n### Library Gallery\n\n\u003CLibraryGallery />\n\nHere's the [CodePen Collection](https://codepen.io/collection/nxqYdx/) of all the designs I explored, including some of the ones below.\n\n### No Styling / No Design\n\nWhile exploring these libraries, I found many either didn't include any specific design at all. I'm not posting screenshots of these since they would be really boring, but here's the list:\n\n- [Tachyons](https://tachyons.io)\n- [Semantic UI](https://semantic-ui.com)\n- [Pure CSS](https://purecss.io)\n- [Blueprint CSS](https://blueprintcss.io)\n- [BassCSS](https://basscss.com)\n- [Tailwind CSS](https://tailwindcss.com)\n- [Kickstart](https://getkickstart.com)\n- [Materialize](https://materializecss.com)\n- [MUI CSS](https://www.muicss.com)\n- [Solid](https://solid.buzzfeed.com)\n- [Expressive CSS](https://johnpolacek.github.io/expressive-css/)\n- [Beard](https://buildwithbeard.com)\n- [Inuit CSS](https://github.com/inuitcss/inuitcss)\n\n### Results for Libraries\n\nFrankly, I had hoped for some amazing design I just copy/paste and move on. But it appears none of them offer a great option. I don't judge too harshly since these libraries are probably great at solving other problems - just not this particular one.\n\nFrom these options, I would choose Bulma or UIKit. Even those are still pretty basic, so it would still require some polishing to make it look \"designed\". Next, let's see some examples of how others are styling code samples on their websites.\n\n## Existing Ideas\n\nNOTE: many of these screenshots also include syntax highlighting, which colorizes the code samples. At this point, I'm not talking about coloring the code within the samples, I'm just looking at the pre and code element styling.\n\n\u003CExistingIdeasGallery />\n\nThe most common two styles are the background color only and the borders and background color. Most of the blogs and documentation sites I visited used one of these two options.\n\nSince these two were so popular, I wondered if this was the default browser styling and the site/theme developers didn't bother changing it. So I put together a code sample on my local development server and here's the result:\n\n![Code sample with no styling](/post/code-and-pre-styling/code-sample-with-no-styling.png)\n\nAs you can see, in Chrome the only styling appears to be a monospaced font and a 1 em margin on top and bottom. So, while Borders and Background Color and Background Color Only do require adding some styling, they are still rather plain. That said, code samples aren't common for most websites, so it's understandable that designers and developers focus their time and talents on other elements.\n\nHere's a CodePen showing the basic styling for each of these examples (except the line numbers):\n\n\u003CCodepen height=\"600px\" id=\"bMMKrb\" title=\"Styling Code Samples\" />\n\n### Results for Existing Ideas\n\nI think Background Color Only is a little too plain. The Borders with Background Color is a bit better as it feels like someone actually worked on it to make it look that way. Dashed Lines Top and Bottom has a classy feel without adding too much. Border Left and Border Right feel understated, but not lazy or forgotten. All that said, I have to explain the Header With Label option since it's the most involved to do.\n\n### Header With Label\n\nThe HTML is just like an y other: a code element wrapped in a pre element. However, the pre element also has a rel attribute that contains the type of the code. In the screenshot below, the \"JSX\" label text is in the rel attribute on the pre element.\n\n![Code sample from CSS Tricks block](/post/code-and-pre-styling/code-sample-css-tricks-jsx.png)\n\nThis label text appears using a CSS property I hadn't heard of yet: attr(). The attr() CSS function takes the content of the rel attribute and makes that the content of the pseudo element its applied to.\n\n```css\ncontent: attr(rel);\n```\n\nThe content CSS property only works with pseudo elements. In this case, the :before pseudo element of any pre element that has a rel attribute:\n\n```css\npre[rel]::before {\n  content: attr(rel);\n}\n```\n\nFrom here, the additional styling makes the label readable and positions it at the top of the pre element.\n\nHowever, that's not all. The background color of the header changes for each language on the CSS Tricks blog. Purple is the color for JavaScript, jQuery, and JSX code samples, assigned using an attribute selector:\n\n```css\npre[rel=\"jQuery\"]::before,\npre[rel=\"JavaScript\"]::before,\npre[rel=\"JSX\"]::before {\n  background: #9c27b0;\n}\n```\n\nNow, only those pre elements with the proper rel attribute values will get the purple backgrounds.\n\nWhile I think this is one of the coolest code sample styles out there, it feels heavy for my site. I could probably do this with a different color scheme. However, since I use WordPress, this would require either a custom plugin or hand-coding each code sample to add the rel attribute.\n\n## Summary\n\nI'm still haven't chosen an option yet. The out-of-the-box approach is just out; there's just not enough \"designy-ness\" that's worth stealing/borrowing/copying. I like most of the examples on other people's sites, with the exception of Line Numbers. If you need that, it's possible to do with just code, but I prefer to keep it simple.","src/content/blog/code-and-pre-styling.mdx","7982895516657bb4","code-and-pre-styling.mdx",{"id":214,"data":239,"body":251,"filePath":252,"digest":253,"legacyId":254,"deferredRender":25},{"category":240,"description":242,"heroAccount":243,"heroPhotographer":244,"pubDate":245,"relatedPosts":246,"title":250},[241],"React","After you've built your headless WordPress front-end, you'll want to publish it. This is process for how I published mine to Netlify.","badashphotos","Ash Edmonds",["Date","2018-06-05T00:00:00.000Z"],[247,248,249],{"id":203,"collection":9},{"id":216,"collection":9},{"id":218,"collection":9},"Deploying a React App to Netlify","As part of the creating a headless React-based frontend for my WordPress site, I decided to try hosting my files on Netlify. They tout being super fast when serving a non-database site; a natural fit for a React project. Wes Bos's [React for Beginners course](https://reactforbeginners.com) shows how to deploy to Netlify using the netlify-cli npm package. However, since completing that course, I updated to Node 10, which is not compatible with netlify-cli and Netlify recently deprecated it. In this post, I'll detail how to deploy a site from the command line using their new command line tool: netlifyctl.\n\n## Sign Up for Netlify\n\nIf you don't already have an account, head over to [Netlify.com](https://www.netlify.com) and sign up for an account. You shouldn't need to create a paid account yet, so don't worry about adding payment options.\n\n## Install\n\nFirst off, you'll need to install the new tool on your computer. On OS X, it's available through Homebrew and on Windows, it's available through Scoop.\n\n### OS X\n\nIf you don't already have [Homebrew](https://brew.sh/) installed, open Terminal and enter this command, then follow the prompts:\n\n```shell\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\nWith Homebrew installed, point to the netlifyctl tap:\n\n```shell\nbrew tap netlify/netlifyctl\n```\n\nNext, install it:\n\n```shell\nbrew install netlifyctl\n```\n\n### Windows\n\nIf you don't already have [Scoop](https://scoop.sh/) installed, make sure you have [PowerShell 3](https://www.microsoft.com/en-us/download/details.aspx?id=34595) or higher installed, open it, then install Scoop using:\n\n```shell\niex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n```\n\nWith Scoop installed, add the netlifyctl bucket:\n\n```shell\nscoop bucket add netlifyctl https://github.com/netlify/scoop-netlifyctl\n```\n\nThen install it:\n\n```shell\nscoop install netlifyctl\n```\n\n## Deploying a React App\n\nIn this case, I'm specifically talking about a project created with [create-react-app](https://github.com/facebook/create-react-app). If you aren't using create-react-app, you will need to change some paths to match your project.\n\nWith netlifyctl installed, change directories into your project:\n\n```shell\ncd /myreactapp\n```\n\n### Permissions\n\nStart by giving your app permission to access your Netlify account.\n\n```shell\nnetlifyctl login\n```\n\nThis will open your Netlify account in a web browser and ask if you want to give the CLI permission to access your account.\n\n![Netlify grant permissions prompt](/post/deploying-a-react-app-to-netlify/authorize-netlify-cli.png)\n\nClick the Authorize button. Once it confirms the CLI has permission to access your account, you can close the browser tab/window.\n\n### Build\n\nIf you haven't already, run the build process for your app. For create-react-app, that's:\n\n```shell\nnpm run build\n```\n\n### Deploy\n\nNext, use this command to start the deploy process to Netlify:\n\n```shell\nnetlify deploy\n```\n\nIt begins by asking if this is a new site. Entering \"no\" allows you to search by name for the existing site. Entering \"yes\" creates a new site.\n\nEither way, it then asks for the path you'd like deployed. For a create-react-app project, it is:\n\n```shell\n./build\n```\n\nThis uploads your build directory to Netlify and prompts you with the URL for your deployed app, which you can alt+click to view.\n\n## Last Things\n\nThat's it! Your site should be visible on Netlify! A few last things: you'll notice there's now a netlify.toml file in your project. This file contains the settings you selected while deploying your app. Commit that file to your git repo to avoid answering those prompt again in the future.\n\n### Help!\n\nIf you forget how all this works, you can use:\n\n```shell\nnetlifyctl --help\n```\n\nThis lists out the commands available and how to use them. You can also use it with a specific command like:\n\n```shell\nnetlifyctl deploy --help\n```\n\n## Bonus Material\n\nIf you need to make changes to your app - say you're like me and you forgot to run \"npm run build\" first so you deployed the default create-react-app build folder - and you need to re-deploy the project. Fortunately, it's very simple:\n\n```shell\nnetlify deploy\n```\n\nHowever, each time, the script prompts for the build path. This\"feature\" grows tiresome when you forget another thing, then another thing, then another thing and perform several deployments in a row (not that I would know from experience...). To avoid this, edit the netlify.toml file and add the build path. The default file includes your Netlify site ID and:\n\n```shell\n[Build]\n  Publish = \"\"\n  Functions = \"\"\n```\n\nAdd your build path in the Publish value between the double quotes:\n\n```shell\n[Build]\n  Publish = \"./build\"\n```\n\nNow, the deployment script uploads the files from the build folder and doesn't stop for prompts each time.","src/content/blog/deploying-a-react-app-to-netlify.mdx","1cf692650b030e4e","deploying-a-react-app-to-netlify.mdx","editing-the-readme",{"id":255,"data":257,"body":276,"filePath":277,"digest":278,"legacyId":279,"deferredRender":25},{"category":258,"description":260,"heroAccount":261,"heroPhotographer":262,"pubDate":263,"relatedPosts":264,"title":275},[259],"WordPress Plugin Boilerplate","The WordPress Plugin Boilerplate include a typically README file needed for any plugin. Explore the eight parts and what to do with them.","jaysung","Jehyun Sung",["Date","2017-06-19T00:00:00.000Z"],[265,267,269,271,273],{"id":266,"collection":9},"guide-using-wordpress-plugin-boilerplate",{"id":268,"collection":9},"why-use-the-boilerplate",{"id":270,"collection":9},"the-structure-of-the-wordpress-plugin-boilerplate",{"id":272,"collection":9},"understanding-loader-class",{"id":274,"collection":9},"using-plugin-generator","Editing the README","In the [previous post](/post/using-plugin-generator/) of this [WordPress Plugin Boilerplate series](/post/guide-using-wordpress-plugin-boilerplate/), we created the WP Starter Plugin using the plugin generator. However, before we begin developing, there is at least one thing we need to edit: the README file.\n\nThe plugin generator barely touches the README file (remind me to file a bug report), leaving it incomplete. Since we want to learn to develop plugins properly as we go, we start by editing the README.\n\n## Examining the Parts\n\nThe README consists of several parts which are typical for most plugin README files:\n\n- Tags (at the top)\n- Description\n- Installation Instructions\n- Frequently Asked Questions\n- Screenshot List\n- Changelog\n- Upgrade Notices\n- Arbitrary Section\n\n### Tags\n\nThe tags populate much of the information you see in a plugin listing on the WordPress Plugin Directory.\n\nFor starters, correct the `=== Plugin Name ===` to your plugin's name.\n\nThe contributors tag needs your wordpress.org username and any other developer's usernames as well.\n\nThe Donate link should already be your Author URI. If you have a specific site where people can donate money for your plugin, use that instead.\n\nTags helps classify your plugin in the directory. Its similar to how news websites use categories like World, Sports, Entertainment, etc. If you need to use more than one, be sure to separate them with commas.\n\nWordPress uses the Requires At Least and Tested Up To tags for compatibility checks. If a plugin requires a specific version of WordPress, then users below that version will not receive automatic updates.\n\nStable Tag is the current version of your plugin. Update this every time you create a new version. Since this is a new plugin, change this to 1.0.0.\n\nLicense and License URI tags should remain \"GPL-2.0\" and the URL given. To remain compatible with the GPL 2 license, you can use a more permissive license, like the MIT license, but not a more restrictive one.\n\n### Description\n\nThere are actually two descriptions in the README file. There's a short description above the `=== Description ===` header and a long description just below the header.\n\nLimit the short description to 150 characters or less and do not use markup. Think of this as a tweet describing your plugin.\n\nThe long description explains the details of your plugin. This section uses [Markdown formatting](https://developer.wordpress.org/plugins/wordpress-org/how-your-readme-txt-works/#markdown) so you can dress it up with lists, links, headings, and even videos. It can be as long as you prefer and can include just about anything. Many developers use this section to convince users to choose this plugin, up-sell paid versions of this plugin, provide documentation for simpler plugins, and/or usage instructions.\n\nAs an example, the [Yoast SEO plugin](https://wordpress.org/plugins/wordpress-seo/) uses the long description to convince users to install the plugin, up-sell the paid version of the plugin, then detail the plugin features. Others simply provide a link to the plugin's website where the details are provided.\n\nI would advise using this space to add as much information as possible about your plugin. Give people reasons to use your plugin and list out the features. Then, provide more detailed documentation on your website or on a dedicated plugin site.\n\n### Installation Instructions\n\nGive people the instructions what they need to get your plugin working. Some plugins only require installation and activation to work. Others need shortcodes placed into content. Some may require template tags. I saw one recently on github that required moving a folder into your theme.\n\nMost of the time, the first two instructions in the example list are consistently the same. For the rest, give step-by-step details. Be sure to test this out on a new WordPress install to make sure you don't miss anything.\n\n### Frequently Asked Questions\n\nThis is your chance to provide some basic documentation to users. If your plugin uses a shortcode, give the basic usage instructions in an FAQ. Same for template tags or any other major plugin feature. Try to anticipate what people may ask and answer it here first. Be sure to pay attention to the example's formatting.\n\n### Screenshot List\n\nProvide some screenshots of your plugin in action. These could be the settings pages or examples of the output. For example, if you provide 3 screenshots, name the image files screenshot-1.jpg, screenshot-2.jpg, and screenshot-3.jpg. Then the screenshot descriptions in this list match the corresponding file based on the list order. Since this is a new plugin, leave the examples alone. We'll add screenshots later and edit these accordingly.\n\n### Changelog\n\nThe changelog provides details about the changes from one version to the next. I recommend providing as much as detail as you can. For example, if the next version has 10 commits, use the commit messages as list items in the changelog for this version. If you don't use the commit messages, at least tell what major things changed in this new version. For a new plugin, there isn't a changelog yet, so remove the examples and enter something like:\n\n```markdown\n= 1.0.0 =\n\n- New plugin.\n```\n\n### Upgrade Notices\n\nAt first it seems like the upgrade notice is the same as the changelog entry. However, these notices are considerably shorter. I think of them like a mini-sales pitch for why a user should update to this new version. Keep them short, the limit is 300 characters. New plugins also don't need an upgrade notice, so you can delete the examples here. The formatting is the same as the changelog, so we can look there for an example later.\n\n### Arbitrary Section\n\nYou can add additional sections to the README and they can be whatever you need. They use the same heading formatting as the other headings and also use Markdown formatting. I've seen just a handful of plugins that use another section. They are usually for something really outside the norm or where the plugin requires additional information outside not classified under the provided headings. In this case, remove the entire section.\n\n## Wrapping Up the README\n\nAt this point, your README should have an accurate set of tags and plugin name at the top, good plugin descriptions (long and short), good installation instructions, no FAQs, no screenshots, no upgrade notices, and one changelog entry. In the next post, we will begin creating the WP Starter Plugin and learning to build plugin parts in the boilerplate.","src/content/blog/editing-the-readme.mdx","7cff48fe95d76a77","editing-the-readme.mdx",{"id":216,"data":281,"body":292,"filePath":293,"digest":294,"legacyId":295,"deferredRender":25},{"category":282,"description":283,"heroAccount":284,"heroPhotographer":285,"pubDate":286,"relatedPosts":287,"title":291},[207],"How to create a theme for a headless WordPress install. Even when the front-end of your site isn't displayed by WordPress, you still need a theme.","lisanguyen","Lisa Nguyen",["Date","2018-09-18T00:00:00.000Z"],[288,289,290],{"id":214,"collection":9},{"id":203,"collection":9},{"id":218,"collection":9},"Headless Theme for WordPress","In my previous [post about editor links](/post/editor-links-for-headless-wordpress-themes/), I showed how WordPress can create editor links using the live site URL instead of the WordPress URL. When I created a React app for my WordPress site, I run into two issues. First, I wanted to get as much data from WordPress as possible. Second, I want visitors to only view the React app, not the WordPress install. The solution for both of these problems lies in building a WordPress theme. Huh?\n\n## WordPress Theme for a Headless App\n\nOur headless React app still requires an activated, installed theme in our WordPress installation. Others have built [similar projects](https://github.com/paramander/wp-headless-theme), but mine serves two purposes:\n\n1. Adds support for menus, featured images, and other WordPress features\n2. Redirects users to the live site\n\nI wanted my React app to behave similarly to how a typical WordPress theme behaves. For example, while most React apps use hard-coded menus, I wanted the menus to update when I manage them in WordPress. There's no reason to edit React code just to add a menu item. Especially if the React app can get the menu structure from WordPress instead. Let's start by looking at the files included in my [Headless WordPress Theme](https://github.com/slushman/headless-theme).\n\n### Theme Structure\n\nSince this theme does not display any content, it should be minimal. Here is the list of files:\n\n- style.css\n- functions.php\n- index.php\n\nThe [style.css](https://github.com/slushman/headless-theme/blob/master/style.css) file only contains the required WordPress comment block. Next, let's look at these other two files in more detail.\n\n### WordPress Feature Supports\n\nFirst and foremost, the [functions.php](https://github.com/slushman/headless-theme/blob/master/functions.php) file registers support for all the WordPress features you'll need. As an example, if you need featured images for posts and pages, you'll need to add a statement like:\n\n```php\nadd_theme_support('post-thumbnails');\n```\n\nSame goes for menus. Register each menu needed for your site.\n\nThis file can also be a catch-all for anything else you discover you'll need. In future posts, I'll talk about some of the weird WordPress quirks I corrected using the functions.php file.\n\nWe'll also need to redirect people trying to visit our WordPress install.\n\n### Redirects in a WordPress Theme\n\nWe only want people to see our headless React app. So if they accidentally (or purposefully) visit our WordPress install, everything should redirect them to the React app. The [index.php](https://github.com/slushman/headless-theme/blob/master/index.php) file contains a small JavaScript redirection, along with an HTML message. The HTML message links to the live site URL. The JavaScript redirects the user to the live site along with the requested route. For example, if someone tries to go to https://api.slushman.com/post/headless-theme-for-wordpress (that's this post), they will redirect to https://www.slushman.com/post/headless-theme-for-wordpress instead.\n\nI started off trying to redirect using PHP, then JavaScript as a fallback, but found it wasn't working properly and the JavaScript seemed to work better overall. Anyone not using JavaScript would see the message with the link. While that's not the best experience for them, the React app definitely wouldn't function, so the link works well enough.\n\n## Coming Up\n\nNow that I've explained the simple Headless WordPress Theme, next I'll walk through the React app itself. Creating a React app posed its own set of challenges. It requires a different way of thinking compared to building a WordPress theme.","src/content/blog/headless-theme-for-wordpress.mdx","fdcd3f9a1c6e6ef0","headless-theme-for-wordpress.mdx","existing-react-app-to-vite",{"id":296,"data":298,"body":305,"filePath":306,"digest":307,"legacyId":308,"deferredRender":25},{"category":299,"description":300,"heroAccount":301,"heroPhotographer":302,"pubDate":303,"title":304},[241],"Learn the simple steps to update an app made with Create React App to use Vite instead.","socialcut","SOCIAL.CUT",["Date","2023-11-17T00:00:00.000Z"],"How to Convert an Existing React App To Vite","I have several older projects created with Create React App. Since that's been deprecated, it's time to move them to something else and lately, I've been using React with Vite and I'm loving it. This article will show the step-by-step instructions for converting an existing React app to use Vite instead of CRA.\n\nFirst, let me give props to Robin Wieruch and [his instructions](https://www.robinwieruch.de/vite-create-react-app/) for doing this. Most of this came from there, plus the handful of things I'll need for my projects. If you haven't read [his blog](https://www.robinwieruch.de/) yet, check it out, he is sharp and explains things really well.\n\nBefore we get started, there a few requirements. First, install [nvm](https://github.com/nvm-sh/nvm#installing-and-updating), then use node version 18 or higher.\n\n```\nnvm use 18\n```\n\nSecond, I'm using yarn for all the instructions here. If you prefer something else, you'll need to translate it to the correct commands; they are slightly different.\n\nAlso, I use TypeScript in my projects, so I'll add those instructions in with everything else here. If you don't use TypeScript, you can ignore those parts.\n\n## Instructions\n\n### Step 1: Update Dependencies\n\nInstall Vite's React plugin and related libraries, then remove the scripts from Create React App.\n\n```bash\nyarn add vite @vitejs/plugin-react --dev\nyarn remove react-scripts\n```\n\n### Step 2: Update package.json\n\nChange all the scripts in the package.json file to use vite instead of react-scripts.\n\nSo this:\n\n```js\n\"scripts\": {\n  \"start\": \"react-scripts start\",\n  \"build\": \"react-scripts build\",\n  \"eject\": \"react-scripts eject\"\n},\n```\n\nbecomes:\n\n```js\n\"scripts\": {\n  \"start\": \"vite\",\n  \"build\": \"vite build\",\n  \"serve\": \"vite preview\"\n},\n```\n\nNote: just remove the eject script altogether. It's not a thing with Vite.\n\nFinally, add this up near line 3 or 4:\n\n```js\n\"type\": \"module\",\n```\n\n### Step 3: Edit files\n\nVite requires .js files to have the .jsx extension. For TypeScript files, that would be .ts to .tsx. Go through all files in your project and rename them accordingly.\n\nIf you have a `react-app-env.d.ts` file, you can remove it. It helps TypeScript understand the Create React App scripts.\n\n#### Edit index\n\nCheck the index.tsx file. You may need to make the following edits.\n\nChange the ReactDOM import to: `import ReactDOM from \"react-dom/client\"`\n\nChange the main output to:\n\n```js\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  ...current content\n);\n```\n\nYou'll need to remove the `document.getElementById(\"root\")` from inside the render function now too.\n\n### Step 4: Configure Vite\n\nAdd a Vite config file\n\n```bash\ntouch vite.config.js\n```\n\nThen edit the config to have the same output as CRA did.\n\n```js\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig(() => {\n  return {\n    build: {\n      outDir: 'build',\n    },\n    plugins: [react()],\n  };\n});\n```\n\nAlso, rename the postcss.config.js file to postcss.config.cjs.\n\n### Step 5: Edit index.html\n\nMove the index.html file to the project root, since that's where Vite expects it be.\n\n```bash\nmv public/index.html .\n```\nThen edit that file to remove any occurences of %PUBLIC_URL%. You can just find/replace that string with an empty replacement.\n\nLastly, add a script to the bottom of the body for the project index.\n\n```html\n\u003Cscript type=\"module\" src=\"/src/index.jsx\">\u003C/script>\n```\n\nThat should be it! If you have any errors or issues, check the link to Robin's article above. He goes through several errors as well as some additional common things you may run into, depending on the other dependencies in your project.","src/content/blog/existing-react-app-to-vite.mdx","029f1011a9f169c4","existing-react-app-to-vite.mdx",{"id":266,"data":310,"body":323,"filePath":324,"digest":325,"legacyId":326,"deferredRender":25},{"category":311,"description":312,"heroAccount":313,"heroPhotographer":314,"pubDate":315,"relatedPosts":316,"title":322},[259],"In this 6-part series, learn about the WordPress Plugin Boilerplate and how it's the last tool you'll need to build amazing WordPress plugins.","memoryonsounds","Kai Oberhäuser",["Date","2017-05-21T00:00:00.000Z"],[317,318,319,320,321],{"id":268,"collection":9},{"id":270,"collection":9},{"id":272,"collection":9},{"id":274,"collection":9},{"id":255,"collection":9},"A Guide to Using the WordPress Plugin Boilerplate","For several years now, I've been building plugins using the [WordPress Plugin Boilerplate](https://wppb.io/) project. In 2015, I gave a [WordCamp talk](/presentations/using-wp-plugin-boilerplate) about how to use it. Over the past few years, I've answered questions about how to build plugins with the boilerplate. Since there is no official documentation, I hope these posts serve as some unofficial documentation. I covered most of this introductory material in my WordCamp talk. However, I'm planning more detailed posts, additional code examples, and topics I didn't cover in the presentation. I'll also offer some shortcuts and potential improvements, in case you want to fork the boilerplate.\n\nWhen I first began writing plugins, I did what most beginning developers do - copy and paste code samples from the Codex and/or another developer's blog. Each plugin eventually worked, but I still cringe when I look at that code. Many of those first plugins were giant, one-file plugins. Over time, I learned better methods for writing code and eventually discovered the WordPress Plugin Boilerplate. Since then, I've used either the boilerplate or my own fork for even the simplest plugins.\n\n## What Is The WordPress Plugin Boilerplate?\n\nA good starting place is understanding what the boilerplate is and the history behind it. The boilerplate is a standardized, organized, object-oriented foundation for building high-quality WordPress plugins. There are some simple examples of how the parts work together as examples for building your plugin. In addition, the boilerplate includes easily overlooked plugin features like inline documentation and translation files.\n\n[Tom McFarlin](https://tommcfarlin.com/), a well-respected developer from Atlanta, GA, developed the boilerplate. He wanted to prevent needlessly writing the same code each time he began a new plugin. The boilerplate is currently on version 3, which included a major restructuring. In March of 2015, the boilerplate project passed to [Devin Vinson](https://devinvinson.com/) of Tampa Bay, FL.\n\n## How Do We Use The Boilerplate?\n\nSince there is so much information to cover, we'll cover each subject in a separate post. This introductory post will serve as a table of contents for the series. Throughout this series, we'll build an example plugin titled \"WP Starter Plugin\". It will include typical plugin parts like settings pages, widgets, metaboxes, etc. This gives you a major head start when creating plugins in the future.\n\n## Posts In This Series\n\n- [Why Use the Boilerplate?](/post/why-use-the-boilerplate/)\n- [The Structure of the WordPress Plugin Boilerplate](/post/the-structure-of-the-wordpress-plugin-boilerplate/)\n- [Understanding the Loader Class](/post/understanding-loader-class/)\n- [Using the Plugin Generator](/post/using-plugin-generator/)\n- [Editing the README](/post/editing-the-readme/)","src/content/blog/guide-using-wordpress-plugin-boilerplate.mdx","92375639555bb2e0","guide-using-wordpress-plugin-boilerplate.mdx","find-user-id-user-metadata",{"id":327,"data":329,"body":336,"filePath":337,"digest":338,"legacyId":339,"deferredRender":25},{"category":330,"description":331,"heroAccount":332,"heroPhotographer":333,"pubDate":334,"title":335},[15],"Getting a particular user by their metadata is not possibile with built-in WordPress functions, but this function does the job.","d_dandelion","david pl",["Date","2011-07-25T00:00:00.000Z"],"Find User ID by User MetaData","I just wrote this useful function and thought I'd share. I'm working on a plugin for my employer, [Belmont University.](https://www.belmont.edu) I needed to find a user's ID by the user's barcode metadata. WordPress does not have a built-in function for this, but this custom function works nicely. Add it to your theme's functions.php file or to a plugin file (in my case, this is part of plugin). Here's the function:\n\n```php\n/**\n * Returns a list of user IDs matching the metavalue\n * @param \tstring \t\t$metakey \tThe metadata key\n * @param \tstring \t\t$metavalue \tThe value to find\n * @return\tarray|bool \t\t\tAn array of user IDs or false\n */\nfunction get_user_by_metadata($metakey, $metavalue) {\n    $return = [];\n\n    $args['fields'] = 'ID';\n    $args['meta_key'] = $metakey;\n    $args['meta_value'] = $metavalue;\n\n    $user_query = new WP_User_Query($args);\n\n    if (empty($user_query->results)) { return FALSE; }\n\n    return $user_query;\n} // get_user_by_metadata()\n```\n\n[Gist of the code above](https://gist.github.com/slushman/f236ae998f7b5cd7a49c)\n\nKeep in mind, this returns an array, not a string.","src/content/blog/find-user-id-user-metadata.mdx","8ba3a2fff59da124","find-user-id-user-metadata.mdx",{"id":218,"data":341,"body":352,"filePath":353,"digest":354,"legacyId":355,"deferredRender":25},{"category":342,"description":343,"heroAccount":344,"heroPhotographer":345,"pubDate":346,"relatedPosts":347,"title":351},[207],"Learn how to use your existing WordPress site with Create React App using the WordPress REST API to build a front-end for your website with React.","johnmarkarnold","John Mark Arnold",["Date","2018-08-07T00:00:00.000Z"],[348,349,350],{"id":214,"collection":9},{"id":203,"collection":9},{"id":216,"collection":9},"Headless WordPress and Create React App","You may have noticed the appearance of my site has changed a bit! A while back I decided to rebuild my site - finally. In the interest of learning new things, I created a headless WordPress theme using React.\n\n## What Is Headless\n\nWe're not talking about a horseman and Ichabod Crane. Headless separates what you see from where you store and manage content. What you're viewing now is not WordPress. It's a React app that gets the content from a WordPress install on a completely different server. I still write and publish everything in WordPress though.\n\nNormally, WordPress handles everything. It displays the front end, manages all the content, and interacts with the database. In a headless situation, the frontend uses a completely different server than the backend. They only talk to each other through an API; in this case the WordPress REST API.\n\nI decided to try out a new service called Netlify to host this frontend React app. Netlify boasts about being super fast for both deploying an app and serving it. I wrote a post about my [adventures in deploying my app](/post/deploying-a-react-app-to-netlify/), but I've found it's a good host so far. I plan to try out other services with different projects, just to explore options.\n\n## The REST API\n\nWordPress added the backend for the REST API in [version 4.4](https://wordpress.org/news/2015/12/clifford/) and the endpoints in [version 4.7](https://wordpress.org/news/2016/12/vaughan/). Thankfully, since it's been around for a while, the [REST API documentation](https://developer.wordpress.org/rest-api/reference/) is good and fairly easy to figure out. I took [a course on React development](https://reactforbeginners.com/), actually several, including a course on [fullstack development with React](https://www.udemy.com/the-complete-react-fullstack-course/). They all covered fetching data from a remote source. I only needed to figure out the specifics of fetching data from WordPress.\n\n## React\n\nI chose React for several reasons. First, I'd played with it previously, but never built anything beyond some basic tutorial apps. Secondly, since Gutenberg uses React under the hood, I thought it best to learn what WordPress Core uses. Thirdly, there's a huge ecosystem built around React and I wanted to explore that as well. React was challenging to learn, but highly rewarding. Funny enough, I kept thinking this is how I had wanted to build things all along. React and Javascript made many features super easy to build compared to the workarounds required in PHP.\n\nI used the popular [Create React App](https://github.com/facebook/create-react-app/) project from Facebook as a starting point. While I explored creating my own React project from scratch, CRA just makes more sense. There are some ideas I'd like to explore regarding additional optimizations that are difficult without ejecting from CRA. Those can be performed in later versions of this site/app/frontend though.\n\n## In the Future...\n\nI'm planning to write more posts about how I built this site and the tech behind it. I've already discovered some really good tips for others to follow. My [next post](/post/editor-links-for-headless-wordpress-themes/) covers how links work with a headless WordPress and the simple solution.","src/content/blog/headless-wordpress-create-react-app.mdx","3cb5aabd8328681a","headless-wordpress-create-react-app.mdx","how-to-build-react-components",{"id":356,"data":358,"body":364,"filePath":365,"digest":366,"legacyId":367,"deferredRender":25},{"category":359,"description":114,"draft":25,"heroAccount":360,"heroPhotographer":361,"pubDate":362,"title":363},[113],"ryanquintal","Ryan Quintal",["Date","2022-08-05T00:00:00.000Z"],"How to Build React Components","Components are the heart of React. A good component is simple, reusable, and allows for building more complex interfaces.\n\n## Simple\n\nIt's tempting to build a component that outputs almost anything based on what props you give it. However, this is confusing to maintain and use. React components should still follow development best practices, like the single-responsibility principle - only doing one thing and doing it well. If the component name is List, it should output a list and only take props for outputting a list.\n\n## Reusable\n\nReusable components take props that change component content, which allows for flexibility. The previously mentioned List component could take the props 'items' containing all the information needed for displaying each item. The List component would display items based on the given props.\n\n```js\nconst items1 = [0, 1];\nconst items2 = ['Colorado', 'Tennessee'}];\n\nconst ExamplePage = () => {\n    return (\n        \u003Cdiv>\n            \u003CList items={items1} />\n            \u003CList items={items2} />\n        \u003C/div>\n    );\n};\n```\n\nThe output might be something like:\n\n```html\n\u003Cdiv>\n  \u003Cul>\n    \u003Cli>0\u003C/li>\n    \u003Cli>1\u003C/li>\n  \u003C/ul>\n  \u003Cul>\n    \u003Cli>Colorado\u003C/li>\n    \u003Cli>Tennessee\u003C/li>\n  \u003C/ul>\n\u003C/div>\n```\n\nFor creating React components, there are two flavors: class-based and functional.\n\n## Class-based Components\n\nBefore React 16.8, the only way to build React components was using classes. Here's a simple example:\n\n```js\nclass Example extends React.component {\n  render() {\n    return \u003Cdiv>Example component\u003C/div>;\n  }\n}\n```\n\nClass components already have all the lifecycle functions available. They also have constructors and other class-related functionality like any other JavaScript [ES6 class] (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).\n\n```js\nclass Example extends React.Component {\n  constructor() {\n    super();\n    this.state = { showThing: false };\n  }\n\n  componentDidMount() {\n    const apiData = this.props.callEndpoint();\n\n    if (apiData.hasData) {\n      this.setState({ showThing: true });\n    }\n  }\n\n  render() {\n    if (!this.state.showThing) {\n      return null;\n    }\n\n    return \u003Cdiv>Example component\u003C/div>;\n  }\n}\n```\n\nAs these components get more and more complex, the verbosity of this syntax makes them increasingly difficult to read. If code is hard to read, it's hard to maintain. In my next post, I'll go into more detail about using class-based components since many companies still use them. Considering how large and verbose these components become, React made developers' lives easier in React 16.8 by introducing hooks and stateful functional components.\n\n## Hooks and Functional Components\n\nFunctional components create a component as simple functions. All of these examples are valid components in React:\n\n```js\nconst ExampleComponent = \u003Cdiv>Example component\u003C/div>;\n\nfunction ExampleComponent() {\n  return \u003Cdiv>Example component\u003C/div>;\n}\n\nconst ExampleComponent = () => \u003Cdiv>Example component\u003C/div>;\n```\n\nAs you can see, this is much simpler and easier to understand. Using props is also much simpler compared to class-based components.\n\nClass Component\n\n```js\nclass Example extends React.component {\n  render() {\n    return \u003Cdiv>Example component is {this.props.adjective}\u003C/div>;\n  }\n}\n```\n\nFunctional Component\n\n```js\nconst Example = ({ adjective }) => \u003Cdiv>Example component is {adjective}\u003C/div>;\n```\n\n### Hooks vs Lifecycle Functions\n\nWhen we looked at class-based components, I mentioned lifecycle functions, like componentDidMount, which I showed in a code example. However, those are not available in functional components since they are methods only available when extending classes. React uses hooks for the same purpose. This is the class component example refactored as a functional component:\n\n```js\nconst Example = () => {\n  const [showThing, setShowThing] = React.useState(false);\n\n  React.useEffect(() => {\n    const apiData = this.props.callEndpoint();\n\n    if (apiData.hasData) {\n      setShowThing(true);\n    }\n  }, []);\n\n  if (!showThing) return null;\n\n  return \u003Cdiv>Example component\u003C/div>;\n};\n```\n\nThis code is more concise and easier to understand and read. You might notice the useState and useEffect functions. Those are some of the hooks provided by React. In future posts, I'll go over each hook in greater detail.\n\n## Conclusion\n\nThis post barely touches on all the best practices for creating React components. In future posts, I'll present more details about each React hook, more best practices, and how to know when to break up a component. In my next post, we'll look deeper into class-based components.","src/content/blog/how-to-build-react-components.mdx","e1bd3281b400f34e","how-to-build-react-components.mdx","how-to-change-the-featured-image-labels",{"id":368,"data":370,"body":377,"filePath":378,"digest":379,"legacyId":380,"deferredRender":25},{"category":371,"description":372,"heroAccount":373,"heroPhotographer":374,"pubDate":375,"title":376},[15],"Did you know you can customize the terminology around featured images in WordPress? Check out how to use filters to change the terms.","snehachekuri93","Sneha Chekuri",["Date","2015-11-03T00:00:00.000Z"],"How to Change the Featured Image Labels","When creating a site for a client or creating a plugin, I've found its helpful to customize things as much as possible to the intended usage. This is especially important for client work since most clients have specific terminology they use for things. In the case of Featured Images, the site or plugin might be using the featured image differently than how one might use it on a news or blog post.\n\nI'm currently writing a plugin with a custom post type and using the featured image as a headshot for an employee. While \"featured image\" may work fine, \"headshot\" is more specific and makes more sense in this context. I haven't been able to find anything recent about how to change the labels on the existing Featured Image metabox. The most [commonly referenced code](https://themergency.com/featured-image-metabox-customization/) only works some of the time. Specifically, when one removes a featured image, the label for the link changes back to referencing \"featured image\" instead of the customized label.\n\nI dug through the core and found the [post*type_labels*$post_type](https://developer.wordpress.org/reference/hooks/post_type_labels_post_type/) filter, which was added in version 3.5. This filter makes customizing the featured image labels super easy:\n\n```php\n/**\n * Changes strings referencing Featured Images for a post type\n *\n * In this example, the post type in the filter name is \"employee\"\n * and the new reference in the labels is \"headshot\".\n *\n * @see    https://developer.wordpress.org/reference/hooks/post_type_labels_post_type/\n *\n * @param     object    $labels    Current post type labels\n * @return    object               Modified post type labels\n */\nfunction change_featured_image_labels($labels) {\n    $labels->featured_image = 'Headshot';\n    $labels->set_featured_image = 'Set headshot';\n    $labels->remove_featured_image = 'Remove headshot';\n    $labels->use_featured_image = 'Use as headshot';\n\n    return $labels;\n} // change_featured_image_labels()\n\nadd_filter('post_type_labels_employee', 'change_featured_image_labels', 10, 1);\n```\n\n[Gist of the code above](https://gist.github.com/slushman/454cc8b26c330727df13)\n\nThe labels are in an object and we then reset the values of each specific item to what we want. Then return the object.","src/content/blog/how-to-change-the-featured-image-labels.mdx","d7e7cbc3853dc48e","how-to-change-the-featured-image-labels.mdx",{"id":62,"data":382,"body":391,"filePath":392,"digest":393,"legacyId":394,"deferredRender":25},{"category":383,"description":384,"heroAccount":385,"heroPhotographer":386,"pubDate":387,"relatedPosts":388,"title":390},[15],"You won't believe the simple solution for linking to the Customizer in WordPress. You can also link to panels, section, and controls too!","scottwebb","Scott Webb",["Date","2016-06-02T00:00:00.000Z"],[389],{"id":52,"collection":9},"How to Link to the Customizer","I recently needed to link to a custom panel in the Customizer and had to figure it out. [Devin Price](https://wptheming.com/2015/01/link-to-customizer-sections/) pointed me in the right direction, but I ended up looking in the WordPress core to see how they do it and this is how.\n\nThis a simple link to Customizer:\n\n```php\n\u003Ca href=\"\u003C?php echo esc_url(admin_url('customize.php')); ?>\"\n  >Link to Customizer\u003C/a\n>\n```\n\n## Linking to Panels, Sections, and Controls in the Customizer\n\nIf you want to link to a specific panel in the Customizer, you'll want to use this:\n\n```php\n$query['autofocus[panel]'] = 'nav_menus';\n\n$panel_link = add_query_arg($query, admin_url('customize.php'));\n\n?>\u003Ca href=\"\u003C?php echo esc_url($panel_link); ?>\">Link to Panel\u003C/a>\n```\n\nIf you aren't familiar with [add_query_args](https://developer.wordpress.org/reference/functions/add_query_arg/), its worth reading up on it. I learned about it from [Fränk Klein](https://twitter.com/fklux) for how to properly [add Google Fonts to WordPress](https://themeshaper.com/2014/08/13/how-to-add-google-fonts-to-wordpress-themes/). [Pippin Williamson](https://pippinsplugins.com/) also has a good post about write-up about [using add_query_args](https://pippinsplugins.com/the-add_query_arg-helper-function/) too. We'll see later how you can use it to create more advanced links into the Customizer.\n\n### Security Warning!\n\nOne warning: always specify the URL parameter and always escape the output. The core developers [discussed this issue](https://make.wordpress.org/plugins/2015/04/20/fixing-add_query_arg-and-remove_query_arg-usage/) in April of 2015. If you don't specify the URL and don't escape the output of this function, then someone might be able to use it as a XSS attack vector. If you'll notice, I'm including the [esc_url()](https://developer.wordpress.org/reference/functions/esc_url/) function in the output of each of the examples above and the URL parameter is specified too.\n\nIn the $query array, the key tells the Customizer what to do, then the value tells it where we're going. From the example above: autofocus in a panel called \"nav_menus\".\n\n### Panel Options\n\nYou can change the value to the panel of your choice. Here's a list of the default panels included in WordPress (as of version 4.5.2):\n\n- widgets = Widget panel\n- nav_menus = Menus panel\n\nIf you want to link to a section instead, you can change part of the key:\n\n```php\n$query['autofocus[section]'] = 'title_tagline';\n\n$section_link = add_query_arg($query, admin_url('customize.php'));\n\n?>\u003Ca href=\"\u003C?php echo esc_url($section_link); ?>\">Link to Section\u003C/a>\n```\n\n### Section Options\n\nHere are the IDs for the default sections in WordPress:\n\n- static_front_page = Static Front Page section\n- title_tagline = Site Identity section\n\nSome of the default themes like Twenty Sixteen add their own sections and any theme can add the following sections by declaring theme support for them:\n\n- background_image = Background Image section\n- header_image = Header Image section\n\n### Field Options\n\nThe real magic is linking to the customizer and autofocusing on a specific field (aka control):\n\n```php\n$query['autofocus[control]'] = 'blogname';\n\n$control_link = add_query_arg($query, admin_url('customize.php'));\n\n?>\u003Ca href=\"\u003C?php echo esc_url($control_link); ?>\">Link to Control\u003C/a>\n```\n\nThis links to the Site Title field in the Site Identity section. If you're asking people to go to a specific place and make an edit, go ahead and link this way to make it easier.\n\n## After the Customizer\n\nIn addition to linking to somewhere within the Customizer, you can also specify where to go after you exit. Core uses the page you're currently on by default. You can check the link to the Customizer from different places in the admin and see that return value changes.\n\n```php\n$query['return'] = admin_url();\n\n$link_with_return = add_query_arg($query, admin_url('customize.php'));\n```\n\nThat will link to the Customizer and return you to the Dashboard.\n\nFYI, you cannot specify any old URL to go to afterward. For instance, this does not work:\n\n```php\n$query['return'] = 'https://www.cnn.com';\n\n$link = add_query_arg($query, admin_url('customize.php'));\n\n?>\u003Ca href=\"\u003C?php echo esc_url($link); ?>\">Go to CNN after\u003C/a>\n```\n\nThe Customizer runs these return URLs through the function [wp_validate_redirect()](https://developer.wordpress.org/reference/functions/wp_validate_redirect/). By default, the only allowed URL is the [home_url()](https://developer.wordpress.org/reference/functions/home_url/). Additional URLs can be added using the [allowed_redirect_hosts()](https://developer.wordpress.org/reference/hooks/allowed_redirect_hosts/) filter. The wp_validate_redirect() function is used for many parts of WordPress, so I'd advise caution when adding URLs to this allowed list.\n\nNow, we can build more specific URLs for the Customizer. This could be especially useful if you're walking a site admin through performing several steps:\n\n```php\n$query['autofocus[control]'] = 'blogname';\n\n$query['return'] = admin_url('post-new.php');\n\n$link = add_query_arg($query, admin_url('customize.php'));\n\n?>\u003Ca href=\"\u003C?php echo esc_url($link); ?>\">Set title, then write post\u003C/a>\n```\n\nThis links into the Customizer, autofocuses on the Site Title field, then once you're done, takes you to the new post page.\n\n## Set the Preview Page\n\nIf you have Customizer controls that only apply to specific pages, you can specify which page appears in the previewer:\n\n```php\n$query['url'] = site_url('/news');\n\n$link = add_query_arg($query, admin_url( 'customize.php'));\n\n?>\u003Ca href=\"\u003C?php echo esc_url($link); ?>\">News Page in Preview\u003C/a>\n```\n\nIn this case, the Previewer will display the News page instead of the home page. I'm planning to do additional testing to see if this could be used to style a plugin-specific page.\n\n## All Together Now!\n\nThose are all the parameters currently available for the Customizer. Now you can get really crazy (and specific) about your links to the Customizer. For example, go to the Menu Locations, show the About page in the previewer, then when you're done, add a new page:\n\n```php\n$query['autofocus[section]'] = 'menu_locations';\n$query['return'] = admin_url('post-new.php?post_type=page');\n$query['url'] = site_url('/about-us');\n\n$link = add_query_arg($query, admin_url('customize.php'));\n\n?>\u003Ca href=\"\u003C?php echo esc_url($link); ?>\">Craziness!\u003C/a>\n```\n\nTo wrap up, there are three parameters you can use to link into the customizer: return, url, and autofocus. Use add_query_arg to build the URL and esc_url to display it. The autofocus parameter lets you focus on a panel, a section, or a specific field. Then the url parameter lets you display a specific page in the Previewer. You can use the return parameter to go to a particular place after going to the Customizer. Happy linking!\n\nHere's a [gist of all the code](https://gist.github.com/slushman/6f08885853d4a7ef31ebceafd9e0c180), if you prefer that.","src/content/blog/how-to-link-to-the-customizer.mdx","e56b8075ad6d57b2","how-to-link-to-the-customizer.mdx","how-to-pass-variables-with-get_template_part",{"id":395,"data":397,"body":404,"filePath":405,"digest":406,"legacyId":407,"deferredRender":25},{"category":398,"description":399,"heroAccount":400,"heroPhotographer":401,"pubDate":402,"title":403},[15],"Have you ever needed to pass a variable to a template part in WordPress? Since the proper was difficult to find, here's the right way.","adigold1","Adi Goldstein",["Date","2017-01-11T00:00:00.000Z"],"How to Pass Variables with get_template_part","I've had several occasions where I needed to use variables in a file called using get_template_part, like one of the files in the template-parts folder in \\_s. It took a while for me to find the proper answer, so I'm documenting it here. Just before you use get_template_part(), add set_query_var(). As the arguments, add the name of the variable, then the value. Like:\n\n```php\nset_query_var('user_id', $user_id);\n```\n\nIn the template file, you can then use $user_id as you would any other variable.","src/content/blog/how-to-pass-variables-with-get_template_part.mdx","100b475a39634a49","how-to-pass-variables-with-get_template_part.mdx","how-to-write-comments-in-javascript-typescript-and-react",{"id":408,"data":410,"body":427,"filePath":428,"digest":429,"legacyId":430,"deferredRender":25},{"category":411,"description":416,"pubDate":417,"relatedPosts":418,"title":425,"videoURL":426},[412,413,241,414,415],"JavaScript","TypeScript","Videos","Commenting Code","Learn the multiple ways to write comments in JavaScript, TypeScript, and React.",["Date","2023-05-26T00:00:00.000Z"],[419,421,423],{"id":420,"collection":9},"write-comments-in-html",{"id":422,"collection":9},"write-comments-in-css",{"id":424,"collection":9},"should-you-comment-code-or-not","How to Write Comments in JavaScript, TypeScript, and React","https://www.youtube.com/watch?v=ZnNUYNYt8SI","Comments play a crucial role in code documentation and collaboration. They help programmers understand the purpose and functionality of different sections of code, making it easier to maintain and debug. In this blog post, we will explore how to write comments in JavaScript, TypeScript, and React files. We will cover single-line syntax, multi-line syntax, docblocks, valid places to put comments, and invalid places to put comments.\n\n## Comment Syntax\n\n### Single-line syntax\n\nTo write a comment on a single line in JavaScript, start the line with two forward slashes (//). Anything after the slashes will be ignored by the interpreter. For example:\njavascript\n\n```js\n// This is a single-line comment in JavaScript.\n```\n\n### Multi-line syntax\n\nJavaScript also allows multi-line comments using the /* */ syntax. This type of comment can span across multiple lines.\n\n```js\n/*\nThis is a multi-line comment\nin JavaScript.\n*/\n```\n\nDocblocks, also known as JSDoc comments, are a specific type of comment used to document functions, classes, and variables. They provide structured information about the code and can be processed by documentation generators.\n\n```js\n/**\n * Calculates the sum of two numbers.\n * @param {number} a - The first number.\n * @param {number} b - The second number.\n * @returns {number} The sum of the two numbers.\n */\nfunction sum(a, b) {\n  return a + b;\n}\n```\n\nYou can learn more about JavaScript in the book [\"JavaScript and jQuery: Interactive Front-end Web Development\"](https://amzn.to/3old6NB) by Jon Duckett.\n\n## Valid Places to Put Comments\n\n- At the beginning of a file to provide an overview.\n- Before a function or method declaration to explain its purpose and parameters.\n- Inside functions or complex code blocks to clarify their functionality.\n- Anywhere else where additional context or explanations are necessary.\n\nIn React files, comments can be placed anywhere within React components to explain their purpose, describe props, or document complex logic.\n\n## Invalid Places to Put Comments\n\n- Inside strings or regular expressions, as they will be treated as part of the code.\n\nIn React files, comments should not be placed inside JSX tags or expressions, as they will be treated as part of the render output.\n\n## Conclusion\n\nComments are an essential tool for code documentation and understanding. In JavaScript, TypeScript, and React, you can use single-line syntax, multi-line syntax, and docblocks to provide context and explanations for your code. By utilizing comments effectively and placing them in valid locations, you can improve code readability and maintainability, making collaboration and debugging easier for yourself and your team.","src/content/blog/how-to-write-comments-in-javascript-typescript-and-react.mdx","9edc7a34afa40c76","how-to-write-comments-in-javascript-typescript-and-react.mdx",{"id":170,"data":432,"body":446,"filePath":447,"digest":448,"legacyId":449,"deferredRender":25},{"category":433,"description":434,"heroAccount":435,"heroPhotographer":436,"pubDate":437,"relatedPosts":438,"title":445},[161],"If you want to use the CSS analysis tool, Parker, you first have to install it and set it up. Here's the six step process.","teckhonc","T.H. Chia",["Date","2016-10-24T00:00:00.000Z"],[439,440,441,442,443,444],{"id":168,"collection":9},{"id":157,"collection":9},{"id":172,"collection":9},{"id":174,"collection":9},{"id":176,"collection":9},{"id":178,"collection":9},"Installing Parker","In my [introductory post](/post/parker-and-wordpress-theme-development/), I shared about the CSS analysis tool named Parker. In this post, we'll cover installing Parker on your local machine so you are able to analyze your own code.\n\nBefore performing any of the following steps, you'll need to install Parker and its dependencies. Parker runs from the command line, so you'll need to open your favorite terminal app. I'm on a Mac, so I'll be using Terminal. I'll provide the instructions here for installing everything on a Mac, sorry Windows peeps. If you need assistance or run into difficulties with installing any particular thing, visit that tool's site or try StackExchange. Here's what you'll need to install to follow along:\n\n- Xcode dev tools\n- Homebrew\n- node.js & npm\n- Parker\n- \\_s\n\n### Installing Xcode and the Developer Tools\n\n![Install Xcode before installing Parker](/post/installing-parker/xcode.png) Open Terminal and hit enter after typing/pasting:\n\n```shell\nxcode-select --install\n```\n\nThis should open an application installer wizard for the developer tools. Go through the prompts and install the package. (Source: [OS X Daily](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/))\n\n### Installing Homebrew\n\nOnce that's finished, install Homebrew, which makes installing packages on OS X easier. In Terminal, hit enter after typing/pasting:\n\n```shell\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\nThis script installs Homebrew. It will ask for confirmation that you want to install it. Follow the prompts. (Source: [Homebrew](https://brew.sh/))\n\n### Installing node.js and npm\n\nOnce Homebrew is installed, installing node.js is fairly simple. In Terminal, hit enter after typing/pasting (Source: [George Ornbo](https://shapeshed.com/setting-up-nodejs-and-npm-on-mac-osx/)):\n\n```shell\nbrew install node\n```\n\n### Installing Parker\n\nInstalling Parker at this point should be fairly simple. In Terminal, hit enter after typing/pasting:\n\n```shell\nnpm install -g parker\n```\n\nThe \"-g\" installs Parker globally, so you can access it from anywhere in your system (rather than just inside a specific project or folder). (Source: [Harry Roberts](https://csswizardry.com/2016/06/improving-your-css-with-parker/))\n\n### Copy \\_s\n\nLastly, we'll need a copy of \\_s. Open Finder and decide where you want to save \\_s. This can be any folder; I put my copy of \\_s in Dropbox. In Terminal type/paste:\n\n```shell\ncd\n```\n\nBe sure to leave a space at the end! Drag your work folder from Finder to Terminal. This puts the path to your work folder into Terminal. Hit enter and your working directory in Terminal changes to your work folder. Use git to clone the \\_s repo from Github and work with it on your computer. In Terminal, hit enter after typing/pasting:\n\n```shell\ngit clone git@github.com:Automattic/_s.git\n```\n\n## Wrapping Up\n\nIn the [next post](/post/creating-a-baseline-for-parker/), we'll use Parker to create a baseline measurement so we can see if any of our optimizations are effective. I'll also explain what each result in the report from Parker means.","src/content/blog/installing-parker.mdx","3ae8785429cb76de","installing-parker.mdx","how-to-center-in-css",{"id":450,"data":452,"body":460,"filePath":461,"digest":462,"legacyId":463,"deferredRender":25},{"category":453,"description":455,"heroAccount":456,"heroPhotographer":457,"pubDate":458,"title":459},[15,454],"CSS","This is the ultimate guide to centering elements like images, text, and just about anything else using CSS.","kugnharski","Rodrigo Kugnharski",["Date","2024-03-15T00:00:00.000Z"],"How to Center in CSS","import Codepen from \"../../components/Codepen.astro\";\n\nCentering things in CSS is such a common thing to do, one might think there's only way to do it. Alas, this is not the case. However, having options isn't always a bad thing. &#128512;\n\nLet's look at a bunch of the ways to center elements using CSS. In these examples, we're going to assume the following simple HTML structure:\n\n```html\n\u003Cdiv class=\"center\">\n\t\u003Cspan>Something That should be centered on the page\u003C/span>\n\u003C/div\n```\n\nI've added Codepens to each one to show how they appear. I made the wrapping div full height and full width, then added some color to the centered item so it's easier to see.\n\n\n\n## Display Grid\n\nThe CSS [grid layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout) system can be used in several ways to center content on the page.\n\n\n### Place Content\n\nThe simplest option, as explained by Mozilla's excellent [developer documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/Layout_cookbook/Center_an_element), is to use place-content.\n\n```css\n.center {\n\tdisplay: grid;\n\tplace-content: center;\n}\n```\n\n\u003CCodepen height=\"600px\" id=\"OJGbVxa\" title=\"Center with grid and place content\" />\n\n\n### Align Items and Justify Content\n\nAnother way to center an element with grid is using align-items and justify-content.\n\n```css\n.center {\n\talign-items: center; // vertical centering\n\tdisplay: grid;\n\tjustify-content: center; // horizontal centering\n}\n```\n\n\u003CCodepen height=\"600px\" id=\"LYvbpGr\" title=\"Center with grid, align items, and justify content\" />\n\n\n\n## Display Flexbox\n\nThe CSS [flexbox layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout) system can also be used to simply and easily center content.\n\n\n### Align Items and Justify Content\n\nJust like with grid, use align-items and justify-content with flexbox to center content.\n\n```css\n.center {\n\talign-items: center; // vertical centering\n\tdisplay: flex;\n\tjustify-content: center; // horizontal centering\n}\n```\n\n\u003CCodepen height=\"600px\" id=\"YzMpXBj\" title=\"Center with flex, align items, and justify content\" />\n\n\n### Not Place Content\n\nOne might think, like I did, that you could also just use `place-content: center` with flexbox, right? No. Flexbox expands the content span to full height, but centered horizontally.\n\n\u003CCodepen height=\"600px\" id=\"wvZoaYb\" title=\"Center with Flexbox & Place Content\" />\n\nSo, don't use that, unless that's what you want that to happen.\n\n\n\n## Position Absolute\n\n[Absolute positioning](https://developer.mozilla.org/en-US/docs/Web/CSS/position) removes elements from the normal document flow. This means these elements can appear on top of other elements and can make styling things more difficult. However, there may be times when this is the best solution.\n\n\n### Translate\n\nPosition absolute with left and top set to 50% puts the top left corner of your element in the center of the container. It's more noticable when the element being centered is larger. The transform with translate with two negative 50 percents moves the element 50 percent of the element's width in the other directions. The result places the element in the center of the container. This is a big improvement over the margin auto technique!\n\n```css\n.center {\n\tleft: 50%;\n\tposition: absolute;\n\ttop: 50%;\n\ttransform: translate(-50%);\n}\n```\n\n\u003CCodepen height=\"600px\" id=\"MWRbwde\" title=\"Center with position absolute and translate\" />\n\nNOTE: There were some additional adjustments in this Codepen. I removed the full height and full width from the container so the absolute positioning worked properly.\n\n\n\n## Margin Auto\n\nThere are several ways to center an element using margins.\n\n\n### Left and Right or Inline\n\nThis is one of the oldest ways to center things and it's fairly concise too.\n\n```css\n.center {\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tmax-width: fit-content;\n}\n```\n\nHowever, there's a more modern, even more concise way to do this same thing, and it has great [browser support](https://caniuse.com/mdn-css_properties_margin-inline) too!\n\n```css\n.center {\n\tmargin-inline: auto;\n\tmax-width: fit-content;\n}\n```\n\nYou could also use `margin: auto`. The downside to all of these options is its only for centering horizontally. Also, it requires the element being centered to be a block element. Inline elements would require adding `display: block` to work like the example below.\n\n\u003CCodepen height=\"600px\" id=\"BaEQwvb\" title=\"Center a block element horizontally using margin inline\" />\n\nI learned about this technique from [Josh W Comeau](https://www.joshwcomeau.com/css/center-a-div/#centering-with-auto-margins-1).\n\n\n### Position Absolute\n\nAbsolute positioning can be used with margin auto to center an element in its parent. There is a caveat though. The element must have a fixed size. Unlike many of these other examples, all the styling goes on the element itself, not the container.\n\n```css\n.center {\n\tbottom: 0;\n\theight: 100px;\n\tleft: 0;\n\tmargin: auto;\n\tposition: absolute;\n\tright: 0;\n\ttop: 0;\n\twidth: 100px;\n}\n```\n\nAs you can see, this is probably the most verbose way of centering an item. As I said before, this also requires the element to have a fixed height or width, which isn't always the case.\n\n\u003CCodepen height=\"600px\" id=\"WNWoZdW\" title=\"Center a fixed-dimension element with position absolute and margin auto\" />\n\nI was reminded of this technique by [Matias Kinnunen](https://mtsknn.fi/blog/css-vertical-margin-auto/).\n\n\n### Centering Images\n\nIf the element you're centering has a defined width (like an image), use margin: auto to center that element. However, this only works for block elements - OR - if you set the element to display: block. The major downside of this techn ique is it only centers hor horizontally, not vertically.\n\n```css\n.centerBlock {\n\tdisplay: block;\n\theight: 333px; // this can be any value\n\tmargin: auto;\n\twidth: 500px; // this can be any value\n}\n```\n\nIn a real project, I'd separate these properties out to two separate classes, so the centerBlock class can be reused on other elements with a different size.\n\n```css\n.center {\n\tdisplay: block;\n\tmargin: auto;\n}\n\nimg {\n\theight: 333px; // this can be any value\n\twidth: 500px; // this can be any value\n}\n```\n\n\u003CCodepen height=\"600px\" id=\"JjVbrOW\" title=\"Center an image with display block and margin auto\" />\n\n\n\n## Centering Text\n\nSometimes, you just want the text in a container to be centered.\n\n\n### Text Align With Inline Elements\n\nIf you're just looking to center text (and only text) in a container, use text align center.\n\n```css\n.center {\n\ttext-align: center;\n}\n```\n\n\u003CCodepen height=\"600px\" id=\"ExJNjBv\" title=\"Center text in a span\" />\n\nNotice the following:\n* this only works with inline elements as the text container\n* the center class is added to the container, not the element\n* the only handles horizontal centering, not vertical\n\n\n### Text Align With Block Elements\n\nThe container for your text matters though. So far, most of our examples have used a span (an inline element) as the element being centered inside a div (an block element). Text align center behaves differently when the centered element is a block element.\n\n\u003CCodepen height=\"600px\" id=\"ZEZBbzL\" title=\"Center text in a div\" />\n\nNotice the following:\n* the text background color extends all the way across the screen\n* it doesn't matter if the center class is on the container or the centered element\n\n\n\n## Conclusion\n\nAs you can see, there are loads of ways to center things. Choosing which technique to use depends on the elements you're using, what it's contained in, and how you want the centered element to appear on the page.","src/content/blog/how-to-center-in-css.mdx","91b49913d76a0ca2","how-to-center-in-css.mdx","inline-svg-sane-way",{"id":464,"data":466,"body":473,"filePath":474,"digest":475,"legacyId":476,"deferredRender":25},{"category":467,"description":468,"heroAccount":469,"heroPhotographer":470,"pubDate":471,"title":472},[15],"Using SVGs in WordPress is awesome, but junking up your code is not. Keep your sanity. Use SVGs in your code like this.","bady","bady qb",["Date","2014-11-10T00:00:00.000Z"],"Inline SVG the Sane Way","Like everyone else these days, I've totally jumped onboard [the SVG train](https://www.smashingmagazine.com/2012/01/16/resolution-independence-with-svg/). They're scalable and easy to use. If you use inline SVG, they are style-able and reduce server requests, which can help your SEO and loading times.\n\nSadly, inlining SVG also borks up your code. There's nothing more disappointing than combing through neatly organized code completely marred by a giant block of SVG gibberish in the middle of it.\n\nRecently, I discovered a simple way to have my cake and eat it too (mmm, cake!). Check this out:\n\n```php\n/**\n * Returns the requested SVG icon.\n *\n * Returns FALSE if $svg is not set.\n *\n * @param \tstring \t\t$svg \t\tThe name of the SVG icon\n * @return \tmixed \t\t\t\tThe SVG icon\n */\nfunction prefix_get_svg($svg) {\n    if (empty($svg)) { return FALSE; }\n\n    $icons['logo'] = '\u003Csvg... SVG stuff here...\"/>\u003C/svg>';\n\n    return $icons[$svg];\n} // prefix_get_svg()\n```\n\nThe $svg parameter determines which icon in the array the function returns. The function returns FALSE if $svg is empty. The $icons array contains each icon's SVG code as a separate array item. The function simply returns the requested icon, assuming its actually in the array.\n\nThis gives you all the advantages of inline SVG, without borking up your nicely indented, organized code. In my next post, I'll show how combining this with some other simple functions can give you inline SVGs in menu items!","src/content/blog/inline-svg-sane-way.mdx","a822ce0583b2d3c1","inline-svg-sane-way.mdx",{"id":172,"data":478,"body":492,"filePath":493,"digest":494,"legacyId":495,"deferredRender":25},{"category":479,"description":480,"heroAccount":481,"heroPhotographer":482,"pubDate":483,"relatedPosts":484,"title":491},[161],"Underscores is a great starting point for building your custom WordPress theme. Here are four ways to improve the stylsheet using the CSS tool Parker.","element5digital","Element5 Digital",["Date","2016-10-26T00:00:00.000Z"],[485,486,487,488,489,490],{"id":168,"collection":9},{"id":170,"collection":9},{"id":157,"collection":9},{"id":174,"collection":9},{"id":176,"collection":9},{"id":178,"collection":9},"Improving Underscores Stylesheet Using Parker","In the [previous post](/post/creating-a-baseline-for-parker/) in this [series about Parker](/post/parker-and-wordpress-theme-development/), we created a baseline for the \\_s stylesheet and went through the results to understand them better. We also get some ideal scores for each metric. Now that we understand what we're trying to do and why, let's see how we can change the default \\_s stylesheet to get better scores from Parker and create a simpler, more maintainable stylesheet.\n\n## Changing the \\_s Stylesheet\n\nWhen examining the baseline results, we can spot several places where the results differ from the ideal score and we can achieve:\n\n- Reduced Total Stylesheet Size\n- Reduced Total Selectors\n- Reduced Total Identifiers\n- Reduced Selectors Per Rule\n- Reduced Identifiers Per Selector\n- Reduced Specificity Per Selector\n- Reduced Top Selector Specificity\n- Reduced Total ID Selectors\n\n### Top Selector Specificity\n\nLet's start with the Top Selector Specificity. This one actually knocks out the Total ID Selectors as well since its the same selector. In style.css (and/or sass > modules > accessibility.scss), remove the \"#content\" at line 682 to become:\n\n```css\n[tabindex=\"-1\"]:focus {\n```\n\nThere's no reason any element with a tabindex value of -1 would need an outline. It's simply more efficient to apply this style to any and every element with that attribute value, so this is an easy win.\n\nNow, if we rerun Parker on the style.css file, we get:\n\n- Total Identifiers: 507\n- Identifiers Per Selector: 1.825, down from 1.8285714285714285\n- Specificity Per Selector: 10.089285714285714, down from 10.446428571428571\n- Top Selector Specificity: 30, down from 120\n- Total Id Selectors: 0\n\nIn addition to improving several of our stats, the Top Selector Specificity Selector has changed to the next \"worst offending\" selector. However, all the infinite-scroll classes fall into the \"we can't control what other coders give us\" category, so we'll leave that alone.\n\n### Identifiers Per Rule\n\nAnother fairly easy tweak will decrease the Identifiers Per Rule and the Selectors Per Rule. In the style.css, we're going to remove all input selectors before a [] selector. Look at the Forms section, which starts around line 420. Many of the selectors here are structured like: input[input=\"sometype\"]. Parker and browser see two selectors here: \"input\" and \"[type=\"sometype\"]\". However, its extraordinarily rare that any other element is going to use the type=\"text\" attribute or any of the others listed here, so the prefix of \"input\" can be removed entirely.\n\nWhile that's all well and good for the button selectors, the field selectors are another story. Do we really need to specify each type of field here? Its more efficient to take all the input[type=\"text\"], input[type=\"password\"], etc and make the entire selector just: \"input, textarea\". Then move all the button selectors below this edited selector, so they get different styling than the generic \"input\" styling. If we need different styling for a particular input type, we can add that in after the input selector's declaration. So the Forms sections goes from this:\n\n![Forms Styles Before](/post/improving-underscores-stylesheet-using-parker/parker-forms-styles-before.png)\n\nTo this:\n\n![Forms Styles After](/post/improving-underscores-stylesheet-using-parker/parker-forms-styles-after.png)\n\nWhen we rerun Parker on the updated stylesheet, we get:\n\n- Total Stylesheet Size: 14647, down from 15424\n- Total Selectors: 252, down from 280\n- Total Identifiers: 423, down from 507\n- Selectors Per Rule: 1.8805970149253732, down from 2.08955223880597\n- Identifiers Per Rule: 1.6944444444444444, down from 1.825\n- Specificity Per Selector: 9.305555555555555, down from 10.089285714285714\n\n### Normalize\n\nWe can reduce that even further by changing the Normalize.css section to update it closer to the current version (v 5.0.0 as of this writing). Remove all the \"input\" prefixes in the Normalize section at the top. This changes results in:\n\n- Total Identifiers: 413\n- Identifiers Per Selector: 1.6547619047619047\n- Specificity Per Selector: 9.265873015873016\n\n### Clearings\n\nAnother easy win is in the Clearings section. Currently, the stylesheet has 12 selectors in the first declaration, and 6 in the second. Almost all of the selectors besides .clear can be removed by adding the \"clear\" class to the elements in the theme. The one exception is the comment-content class since the comments content is output from WordPress and there isn't currently a way to add the clear class to that output.\n\nOpen the template-parts/content-page.php and template-parts/content.php files, add the clear class to the entry-content div. Then remove the corresponding \".entry-content\" selectors from the Clearings section of the stylesheet.\n\nOpen header.php and add the clear class to the header element and the .site-content element. Then remove the \".site-header\" selectors and the \".site-content\" from the Clearings section in the stylesheet.\n\nOpen footer.php and add the clear class to the footer element, then remove the \".site-footer\" selectors from the Clearings section in the stylesheet.\n\nThe results from this change have no effect on the styling or appearance, but we get much better stats from Parker:\n\n- Total Selectors: 240, down from 252\n- Total identifiers: 389, down from 413\n- Selectors Per Rule: 1.791044776119403, down from 1.8805970149253732\n- Identifiers Per Selector: 1.6375, down from 1.6547619047619047\n- Specificity Per Selector: 8.729166666666666, down from 9.265873015873016\n\n## Wrapping Up\n\nWe've gone through the majority of the \\_s stylesheet and optimized it to improve our Parker scores. However, the biggest optimization we can make is with the menus. In the [next post](/post/simplifying-wordpress-menu-styling/), we'll go through all the code and changes we'll need to add, in addition to the changes to the stylesheet.","src/content/blog/improving-underscores-stylesheet-using-parker.mdx","ca8246c756209143","improving-underscores-stylesheet-using-parker.mdx","new-react-app-with-vite",{"id":496,"data":498,"body":505,"filePath":506,"digest":507,"legacyId":508,"deferredRender":25},{"category":499,"description":500,"heroAccount":501,"heroPhotographer":502,"pubDate":503,"title":504},[241],"Learn the simple steps to create a new react app using Vite and Typescript.","weareambitious","Ambitious Studio* - Rick Barrett",["Date","2023-11-17T00:00:00.000Z"],"How to Create a New React App Using Vite","When you find yourself looking up the same set of instructions and consistently finding the wrong ones over and over again, it's time to document things for yourself. So, future self (and everyone else), this is how to create a new React app using Vite. This uses Typescript as well.\n\nBefore we get started, there a few requirements. First, install [nvm](https://github.com/nvm-sh/nvm#installing-and-updating), then use node version 18 or higher.\n\n```\nnvm use 18\n```\n\nSecond, I'm using yarn for all the instructions here. If you prefer something else, you'll need to translate it to the correct commands; they are slightly different.\n\n## Instructions\n\nRun this command in your terminal to create the project and starter files:\n\n```bash\nyarn create vite app-name --template react-ts\n```\n\nNext, go into the folder, install all the dependencies, initialize a git repo, then get started:\n\n```bash\ncd app-name && yarn install && git init\n```\n\n## Add Tailwind\n\nNow, let's add Tailwind because, why not?\n\n```bash\nyarn add --dev tailwindcss postcss autoprefixer\n```\n\nThen, create the tailwind config file:\n\n```bash\nnpx tailwindcss init -p\n```\n\nConfigure the template paths in the tailwind.config.js file:\n```\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\nOpen the `./src/index.css` file and add the @tailwind directives:\n\n```bash\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n## Add Prettier & ESLint\n\n```bash\nyarn add --dev eslint prettier @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react\n\nnode --eval \"fs.writeFileSync('.prettierrc','{}\\n')\"\n\ntouch .eslintrc.js .eslintignore prettierrc.js .prettierignore\n```\n\n### Configure ESLint\n\nAdd the following to the `.eslintrc.js` file:\n\n```js\nmodule.exports = {\n  extends: [\n    // By extending from a plugin config, we can get recommended rules without having to add them manually.\n    'eslint:recommended',\n    'plugin:react/recommended',\n    'plugin:import/recommended',\n    'plugin:jsx-a11y/recommended',\n    'plugin:@typescript-eslint/recommended',\n    // This disables the formatting rules in ESLint that Prettier is going to be responsible for handling.\n    // Make sure it's always the last config, so it gets the chance to override other configs.\n    'eslint-config-prettier',\n  ],\n  settings: {\n    react: {\n      // Tells eslint-plugin-react to automatically detect the version of React to use.\n      version: 'detect',\n    },\n    // Tells eslint how to resolve imports\n    'import/resolver': {\n      node: {\n        paths: ['src'],\n        extensions: ['.js', '.jsx', '.ts', '.tsx'],\n      },\n    },\n  },\n  rules: {\n    // Add your own rules here to override ones from the extended configs.\n  },\n};\n```\n\n#### ESLint ignore\n\nAdd the following to the `.eslintignore` file:\n\n```js\nnode_modules/\ndist/\n.prettierrc.js\n.eslintrc.js\nenv.d.ts\n```\n\n### Configure Prettier\n\nAdd the following to the `prettierrc.js` file:\n\n```js\nmodule.exports = {\n  \"trailingComma\": \"all\",\n  \"tabWidth\": 2,\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"printWidth\": 120,\n  \"bracketSpacing\": true\n}\n```\n\n#### Prettier ignore\n\nAdd the following to the `.prettierignore` file:\n\n```js\nnode_modules/\ndist/\n.prettierrc.js\n```\n\n## Build Stuff\n\nStart things up and test it out:\n\n```bash\nyarn dev\n```\n\n### Optional\n\nIf you prefer using `yarn start` and having the development auto-open when it starts up, go to the `package.json` file and add:\n```js\n\"start\": \"vite --open\",\n```\n\nGo build stuff!","src/content/blog/new-react-app-with-vite.mdx","4803f1ab2b0e168e","new-react-app-with-vite.mdx",{"id":168,"data":510,"body":524,"filePath":525,"digest":526,"legacyId":527,"deferredRender":25},{"category":511,"description":512,"heroAccount":513,"heroPhotographer":514,"pubDate":515,"relatedPosts":516,"title":523},[161],"Using Parker can make you a better WordPress theme developer. Check out the posts in this series to find out how.","harryjamesgrout","Harry Grout",["Date","2016-10-23T00:00:00.000Z"],[517,518,519,520,521,522],{"id":170,"collection":9},{"id":157,"collection":9},{"id":172,"collection":9},{"id":174,"collection":9},{"id":176,"collection":9},{"id":178,"collection":9},"Parker and WordPress Theme Development","Lately, I've been playing with a CSS analysis tool called [Parker](https://github.com/katiefenn/parker) created by [Katie Fenn](https://twitter.com/katie_fenn). Parker examines your stylesheet and gives a treasure trove of metrics. While some of these metrics are merely interesting factoids (like the number of CSS rules), others offer constructive criticism for improvement. The general philosophy is to create more maintainable CSS by simplifying your stylesheet.\n\nHarry Roberts, of [csswizardry.com](https://csswizardry.com), has an [excellent write-up](https://csswizardry.com/2016/06/improving-your-css-with-parker/) about using Parker. He explains some of the options and offers some ideal scores to shoot for, which I'll list and explain in later posts. WordPress developers will need additional code to change the WordPress-generated code, like in menus.\n\nIn the following posts, I'm going to use Parker to test my fork of the \\_s starter theme and made optimize it based on the results. I've based every project over the past two years on \\_s and advise anyone learning theme development to start there. This post will serve as a sort of table of contents; I'll link to each post as they are published.\n\n## Why Use Parker?\n\nAs I mentioned above, Parker is good for reducing the size and complexity of your stylesheet. While that's not a big concern for small projects, for larger projects, this can be a lifesaver. Maybe other developers come along and start adding new features, new CSS methods (floats vs flexbox vs grid) or using different methods ([BEM](https://getbem.com/) vs [Atomic](https://atomicdesign.bradfrost.com/) vs random...) and your stylesheet gets more and more complex.\n\nIdeally, the newer developer(s) would check the stylesheet for existing styles that accomplish what they want. Since this doesn't happen many times, Parker can at least tell them whether their code and existing code can be simpler.\n\n## Posts in This Series\n\n- The first thing you will need to know is [how to install Parker](/post/improving-underscores-stylesheet-using-parker/).\n- Next, you'll want to to [create a baseline](/post/creating-a-baseline-for-parker/) of your current code before making changes.\n- We'll make a [first pass](/post/improving-underscores-stylesheet-using-parker/) at the \\_s stylesheet to find some improvements.\n- The biggest improvements can be made by [restyling the menus](/post/simplifying-wordpress-menu-styling/).\n- Finally, we'll [compare all our changes](/post/results-underscores-stylesheet/) to the baseline.\n- BONUS: using some code tweaks, we can simplify our [menu styling](/post/parker-wordpress-menus/) even more.","src/content/blog/parker-and-wordpress-theme-development.mdx","9e20ff9fc46b9668","parker-and-wordpress-theme-development.mdx",{"id":178,"data":529,"body":543,"filePath":544,"digest":545,"legacyId":546,"deferredRender":25},{"category":530,"description":531,"heroAccount":532,"heroPhotographer":533,"pubDate":534,"relatedPosts":535,"title":542},[161],"Using the CSS tool Parker can help you fix your theme's menu styling. Learn the filters you'll need to make your WordPress menu styling simpler.","bookcrafters","Joe McDaniel",["Date","2017-04-16T00:00:00.000Z"],[536,537,538,539,540,541],{"id":168,"collection":9},{"id":170,"collection":9},{"id":157,"collection":9},{"id":172,"collection":9},{"id":174,"collection":9},{"id":176,"collection":9},"Parker and WordPress Menus","As a sort-of follow up to my previous posts, I ran across an issue with styling menu items and found a great way to add classes so I can style those items directly.\n\nMany of our designs have a vertical bar between menu items. While there are several ways to accomplish this, I've been using something like this in recent projects to style the top-level menu items:\n\n```css\n.primary-menu-item-0 :not(:first-child) a {\n  border-left: 1px solid;\n  padding-left: 1em;\n}\n```\n\nBasically, add a left border and some padding to every menu item, except the first child. This results in a vertical bar between each menu item and the first child just has nothing. You can further refine it by targeting the first and last children to remove the outside padding as well.\n\nSince using Parker to style as directly as possible, it struck me that having a selector that complex shouldn't be necessary. Thankfully, there's a simple way around it.\n\n## Adding Menu Item Classes\n\nIn the menus part of the Parker series, we added classes to each menu item and menu item link. The functions we used can have up to 4 parameters, which are passed in from the filter.\n\nIn the nav_menu_css_class hook, the $item parameter is the menu item object. We're going to check the menu_order property value and if its either the first or last menu item, we'll add classes so we can style those two menu items directly.\n\n```php\n/**\n * Adds a class with the menu name and depth level to each menu item.\n * Makes styling menus much easier.\n *\n * @hooked nav_menu_css_class 10\n * @param array $classes The current menu item classes.\n * @param object $item The current menu item.\n * @param array $args The wp_nav_menu args.\n * @param int $depth The menu item depth.\n * @return array The modified menu item classes.\n */\nfunction example_add_menu_order_to_menu_item_classes($classes, $item, $args, $depth) {\n    if (empty($item)) { return $classes; }\n\n    if (1 === $item->menu_order) {\n        $classes[] = $args->menu_id . '-item-first';\n        $classes[] = $args->menu_id . '-item-' . $depth . '-first';\n    }\n\n    if ($args->menu->count === $item->menu_order) {\n        $classes[] = $args->menu_id . '-item-last';\n        $classes[] = $args->menu_id . '-item-' . $depth . '-last';\n    }\n\n    return $classes;\n} // example_add_menu_order_to_menu_item_classes()\n\nadd_filter('nav_menu_css_class', 'example_add_menu_order_to_menu_item_classes', 10, 4);\n```\n\nTo add the \"first\" classes, we check is $item->menu_order equals 1. If so, add a class that will allow for styling any first menu item and a second class that allow for styling the first menu item at that particular menu depth. Now, we can style all the first menu items and any first menu item at any depth directly using single class.\n\nTo add the \"last\" classes, we compare the menu item count from the menu $args object against the $item->menu_order. If they are equal, we're on the last menu item, so we can add the appropriate classes.\n\n## Adding Menu Link Classes\n\nHowever, my first example was actually styling the menu item link. We can add classes using the nav_menu_link_attributes filter, just like we did when we added the depth classes.\n\n```php\n/**\n * Adds classes to menu item links.\n *\n * Adds the depth class to make styling easier.\n * Adds the \"coin\" class if the menu item has the text-coin class.\n *\n * @hooked nav_menu_link_attributes 10\n * @param array $atts The current menu item link attributes.\n * @param object $item The current menu item.\n * @param object $args The wp_nav_menu args.\n * @param int $depth The menu item depth.\n * @return array The modified menu item link attributes.\n */\nfunction example_add_menu_order_to_menu_item_links($atts, $item, $args, $depth) {\n    if (empty($item)) { return $atts; }\n\n    if (1 === $item->menu_order) {\n        $atts['class'] .= $args->menu_id . '-item-link-first ';\n        $atts['class'] .= $args->menu_id . '-item-link-' . $depth . '-first ';\n    }\n\n    if ($args->menu->count === $item->menu_order) {\n        $atts['class'] .= $args->menu_id . '-item-link-last ';\n        $atts['class'] .= $args->menu_id . '-item-link-' . $depth . '-last ';\n    }\n\n    return $atts;\n} // example_add_menu_order_to_menu_item_links()\n\nadd_filter('nav_menu_link_attributes', 'example_add_menu_order_to_menu_item_links', 10, 4);\n```\n\nThis function follows the same basic pattern, except how the class is added. Now, the first menu item links and last menu item links can be styled using a single class. We can also style the first or last menu item link at any depth using a single class.\n\n## Wrapping Up\n\nSo instead of this:\n\n```css\n.primary-menu-item-0 :not(:first-child) a {\n  border-left: 1px solid;\n  padding-left: 1em;\n}\n```\n\nWe do this:\n\n```css\n.primary-menu-item-link-0 {\n  border-left: 1px solid $teal;\n  padding: 0 1em;\n}\n\n.primary-menu-item-link-0-first {\n  border-left: none;\n  padding-left: 0;\n}\n```\n\nThese are much simpler selectors, so maintainability and troubleshooting will be easier. We also have some really useful classes for styling menu items as needed. Admittedly though, its not as fun as doing it all in one selector.","src/content/blog/parker-wordpress-menus.mdx","c1259e8015ee0d75","parker-wordpress-menus.mdx","phpunit-tests-wp-cli",{"id":547,"data":549,"body":555,"filePath":556,"digest":557,"legacyId":558,"deferredRender":25},{"category":550,"description":551,"heroAccount":552,"heroPhotographer":552,"pubDate":553,"title":554},[99],"Do you know 100% if that 'simple' code change in your plugin broke something? Setup PHPUnit to add tests and get more confidence in your code changes.","chuttersnap",["Date","2018-01-18T00:00:00.000Z"],"PHPUnit tests and WP-CLI","I recently discovered an easy way to add unit tests to my plugins. I've been using WP-CLI for years now to set up new local installs of WordPress and found out it has a command specifically for setting up PHPUnit for plugins. This post is partially for my future self so I can remember how to do all this. FYI, I'm on a Mac, so all the commands will be OS X-specific.\n\n## Install and Configure PHPUnit\n\nStart by installing PHPUnit using Homebrew:\n\n```shell\nbrew install phpunit\n```\n\nThat installs the latest version of PHPUnit and makes it ready to use with the global keyword \"phpunit\".\n\nNext, use WP-CLI to setup the test suites and such needed for PHPUnit. I recommend running this command from the plugin's directory.\n\n```shell\nwp scaffold plugin-tests my-plugin\n```\n\nReplace the \"my-plugin\" part with your plugin name.\n\nIf you aren't already in your plugin directory, change to that now. Then you'll run the installation bash script.\n\n```shell\nbin/install-wp-tests.sh wordpress_test root '' localhost latest\n```\n\nNotes about this command:\n\n- 'wordpress_test' is the MySQL database created by this script and used for testing\n- 'root' is your local MySQL user\n- '' is where your local MySQL user password goes\n- 'localhost' is where your MySQL server is located; 'localhost' means its on your computer.\n- 'latest' changes the version of WordPress to use for testing.\n\nOnce you've run this script, you're ready to start writing tests and running them using the 'phpunit' command. Here's the rub though: the script installs WordPress and the testing suite in the /tmp directory. Why is that a problem? On my computer, at least, the /tmp directory removes anything installed there upon reboot. Which means I need to re-run the tests bash script every time I reboot the computer.\n\nSince we developers prefer not repeating ourselves, here's how to configure things for a more permanent solution.\n\n## Solution\n\nWhat I'm advising here is to move the stuff installed in /tmp to somewhere else, then fix all the references so they still work. So, run all of the above, then navigate to your /tmp folder. Move the /wordpress and /wordpress-tests-lib folders to another location outside the /tmp folder. I moved mine into a directory called unittests in my Dropbox folder.\n\nGo to your Home folder and either open or create the .bash_profile file. You'll probably need to tell Finder to show Hidden files first. In your .bash_profile file, add the following line, using your new directory location:\n\n```php\nexport WP_TESTS_DIR=\"/Your/New/Folder/Location/unittests/wordpress-tests-lib\"\n```\n\nThis line tells the PHPUnit bootstrap.php file where to find the test WordPress install and test suite files.\n\nNow, go to the wordpress-tests-lib directory and open the wp-tests-config.php file. Edit the ABSPATH constant to the '/wordpress' directory you copied over from /tmp earlier. Something like:\n\n```php\ndefine('ABSPATH', '/Your/New/Folder/Location/unittests/wordpress//');\n```\n\nSave the file and reboot your computer. Now, the tests setup by WP-CLI know where the testing WordPress is located, it doesn't disappear when you install updates or reboot, and you can create and run PHPUnit tests for your plugins!","src/content/blog/phpunit-tests-wp-cli.mdx","4d3b98fc1577d5d9","phpunit-tests-wp-cli.mdx","refactoring-code-for-better-understability",{"id":559,"data":561,"body":574,"filePath":575,"digest":576,"legacyId":577,"deferredRender":25},{"category":562,"description":563,"heroAccount":564,"heroPhotographer":565,"pubDate":566,"relatedPosts":567,"title":572,"videoURL":573},[414,415],"Learn the simple yet most effective techniques to refactor code for better understandability, which makes it a breeze to maintain and understand.","h1sts","HS Spender",["Date","2023-06-09T00:00:00.000Z"],[568,569,570,571],{"id":420,"collection":9},{"id":422,"collection":9},{"id":408,"collection":9},{"id":424,"collection":9},"Refactoring Code for Better Understandability","https://www.youtube.com/watch?v=zVrkyEdtp08","In the world of programming, writing code is just the first step towards achieving a functional application. A crucial aspect often overlooked is the readability and maintainability of the codebase. Clean and well-organized code not only improves collaboration among developers but also enhances understandability, which minimizes errors and bugs. However, an existing code base might require rewriting the code to make it cleaner and more understandable; a process called refactoring. In this article, we will explore some essential clean code techniques you can use when writing code and when refactoring to improve code understandability.\n\nThe techniques are explained in-depth in the book [Clean Code: A Handbook of Agile Software Craftmanship](https://amzn.to/3pXPTl5) by Robert C Martin.\n\n## Use Descriptive Variable Names\n\nVariable names should convey their purpose and meaning within the context of the code. Using meaningful and descriptive names can significantly enhance code understandability. Instead of cryptic abbreviations or generic names like \"var1\" or \"temp,\" opt for names that accurately reflect the variable's purpose. For example, replacing \"num\" with \"numberOfStudents\" or \"userInput\" with \"customerName\" provides clarity and reduces confusion.\n\n## Use Descriptive Function Names\n\nSimilar to variables, functions should have descriptive names that convey their purpose and functionality. A well-named function improves code readability by enabling other developers (including yourself) to understand its purpose without examining the implementation details. If a function calculates the total price of a shopping cart, a name like \"calculateTotalCartPrice\" is far more informative than a generic name like \"calculatePrice.\"\n\n## Break Up and Simplify Functions\n\nLong, monolithic functions are harder to understand and maintain. By breaking them up into smaller, more focused functions, you can improve code organization and readability. Each function should have a single responsibility, making it easier to comprehend and test. Additionally, breaking up functions allows for better code reusability, as smaller functions can be used in different parts of the codebase.\n\n## Don't Repeat Yourself\n\nDuplication in code not only increases the chances of introducing bugs but also hinders code understandability. Whenever you encounter duplicate code, it's essential to refactor it into reusable functions or classes. By eliminating redundancy, you promote a more maintainable codebase and reduce the likelihood of errors. Remember the DRY principle: \"Don't Repeat Yourself.\"\n\n## Simplify Complex Conditional Checks\n\nComplex conditional checks can quickly become challenging to comprehend, especially when they involve multiple conditions and nested statements. To enhance code understandability, consider simplifying these checks by introducing boolean variables with descriptive names. By breaking down complex conditions into smaller, well-named variables, you provide clear intentions and improve code readability.\n\n## Use Consistent Formatting\n\nConsistency in code formatting is crucial for readability. Adopting a consistent coding style throughout the project helps developers understand the codebase more easily. Consistent indentation, spacing, and naming conventions make code visually appealing and minimize confusion. Consider using automated tools or code linters to enforce consistent formatting guidelines.\n\n## Conclusion\n\nRefactoring code for better understandability is a critical practice that leads to improved collaboration, reduced errors, and enhanced code maintainability. By renaming variables and functions, breaking up monolithic functions, removing duplication, simplifying complex conditional checks, and adhering to consistent formatting guidelines, developers can significantly improve the readability and understandability of their code. Prioritizing these practices not only benefits the current development team but also sets a strong foundation for future code maintenance and scalability.","src/content/blog/refactoring-code-for-better-understability.mdx","20dee91f828036c8","refactoring-code-for-better-understability.mdx",{"id":176,"data":579,"body":593,"filePath":594,"digest":595,"legacyId":596,"deferredRender":25},{"category":580,"description":581,"heroAccount":582,"heroPhotographer":583,"pubDate":584,"relatedPosts":585,"title":592},[161],"Let's examine the results of our theme stylesheet optimizations using the CSS tool, Parker, and what they mean.","dylan_nolte","dylan nolte",["Date","2016-10-28T00:00:00.000Z"],[586,587,588,589,590,591],{"id":168,"collection":9},{"id":170,"collection":9},{"id":157,"collection":9},{"id":172,"collection":9},{"id":174,"collection":9},{"id":178,"collection":9},"Results for the Underscores Stylesheet","In the [previous posts](/post/simplifying-wordpress-menu-styling/) in the [Parker series](/post/parker-and-wordpress-theme-development/), we optimized the stylesheet for the \\_s starter theme. We also used hooks and functions to customize the WordPress menus. In this post, we will compare our goals and the results we achieved using Parker. Here were our the goals:\n\n- Reduce stylesheet complexity\n- Increasing maintainability\n- Making more CSS classes reusable\n\nNow, lets compare our baseline to our final results:\n\n## Baseline\n\n- Total Stylesheets: 1\n- Total Stylesheet Size: 15432\n- Total Rules: 134\n- Total Selectors: 280\n- Total Identifiers: 508\n- Total Declarations: 243\n- Selectors Per Rule: 2.08955223880597\n- Identifiers Per Selector: 1.8285714285714285\n- Specificity Per Selector: 10.446428571428571\n- Top Selector Specificity: 120\n- Top Selector Specificity Selector: #content[tabindex=\"-1\"]:focus\n- Total Id Selectors: 1\n- Total Unique Colors: 15\n- Unique Colors: #FFFF00,#000000,#C0C0C0,#404040,#EEEEEE,#666666,#FFF9C0,#FFFFFF,#CCCCCC,#BBBBBB,#E6E6E6,#AAAAAA,#111111,#F1F1F1,#21759B\n- Total Important Keywords: 2\n- Total Media Queries: 1\n- Media Queries: screen and (min-width: 37.5em)\n\n## Final Results\n\n- Total Stylesheets: 1\n- Total Stylesheet Size: 14405\n- Total Rules: 134\n- Total Selectors: 240\n- Total Identifiers: 350\n- Total Declarations: 243\n- Selectors Per Rule: 1.791044776119403\n- Identifiers Per Selector: 1.475\n- Specificity Per Selector: 8.566666666666666\n- Top Selector Specificity: 30\n- Top Selector Specificity Selector: .infinite-scroll.neverending .site-footer\n- Total Id Selectors: 0\n- Total Unique Colors: 15\n- Unique Colors: #FFFF00,#000000,#C0C0C0,#404040,#EEEEEE,#666666,#FFF9C0,#FFFFFF,#CCCCCC,#111111,#BBBBBB,#E6E6E6,#AAAAAA,#F1F1F1,#21759B\n- Total Important Keywords: 2\n- Total Media Queries: 1\n- Media Queries: screen and (min-width: 37.5em)\n\n## Comparison\n\nThese lists are helpful, but lets take a look at each optimization and compare the numbers.\n\n### Stylesheet Size\n\nStylesheet size went from 15432kb to 14405kb. That's an over 1kb reduction! While it's \"only\" a 1kb reduction, we're working with a starter theme. Our future projects benefit by having a smaller starting stylesheet.\n\n### Total Selectors\n\nTotal Selectors reduced from 280 to 240. This is not a drastic reduction, but fewer selectors mean styles are easier to understand. Your future self will thank you!\n\n### Total Identifiers\n\nTotal Identifiers reduced from 508 to 350. This is a much larger reduction. Reducing the number of identifiers makes the stylesheet easier to understand. Styles are also easier to override, if necessary.\n\n### Selectors Per Rule\n\nSelectors Per Rule reduced from 2.08955223880597 to 1.791044776119403. Ideally, that final number would just be one so styles apply to a single class.\n\n### Identifiers Per Selector\n\nIdentifiers Per Selector reduced from 1.8285714285714285 to 1.475. This should also be, ideally, one. Selectors should apply to a single class. However, pseudo classes like hover or focus count against you here, making this difficult to avoid.\n\n### Specificity Per Selector\n\nSpecificity Per Selector reduced from 10.446428571428571 to 8.566666666666666. The ideal is up for debate and depends on your CSS methodology. Parker favors the lowest possible specificity. However, BEM and other CSS methodologies favor using classes for everything. Meaning the lowest possible score would be 10. Either way, reducing specificity makes stylesheets easier to understand and maintain. The \"ideal\" should be whatever works best for you.\n\n### Top Selector Specificity\n\nTop Selector Specificity score reduced from 120 to 30. This is not a vital metric, but still a good one. This reduction involves a major break away from how \\_s styles things by default though. The most specific selector they use is for the skip-to-content link target. I asked [why this was so specific](https://github.com/Automattic/_s/issues/1037) and it appears they want the higher-level specificity.\n\n### Total ID Selectors\n\nThe Total Id Selectors reduced from 1 to 0. This is the same thing as above. The skip link target styling uses an ID. If you change this one style, you lower this metric to 0. You also drastically reduce the Top Selector Specificity at the same time.\n\n## Wrapping Up\n\nThose are some pretty good results for a starter theme stylesheet. You'll see much better results with a fully-developed theme. Having done all this work though, what does it all mean?\n\nReducing the stylesheet size helps the site load faster. Each browser request can only return 14kb at a time. Our newly optimized stylesheet, now at 14.4kb, is almost small enough to fit into a single request.\n\nWe've made the stylesheet easier to read by eliminating the longer selectors, also making it easier to maintain.\n\nFinally, we've added more reusable classes and made the remaining rules less specific. In future projects, one would create only reusable classes and use WordPress hooks to style elements directly.\n\nI plan to submit pull requests to the \\_s repo based on some of these tweaks. Hopefully, some of these changes will already exist in future versions of \\_s. I highly recommend running Parker on your finished stylesheets. Parker doesn't solve everything but rather shows what needs improving.\n\nParker integrates nicely into Gulp. My gulpfile runs Parker after processing my SASS files, then displays a simple report in the command line. Let me know how Parker is changing your stylesheets and/or development process!","src/content/blog/results-underscores-stylesheet.mdx","9d3ff9397ddad913","results-underscores-stylesheet.mdx",{"id":197,"data":598,"body":607,"filePath":608,"digest":609,"legacyId":610,"deferredRender":25},{"category":599,"description":600,"draft":25,"heroAccount":601,"heroPhotographer":602,"pubDate":603,"relatedPosts":604,"title":606},[188],"Crafting a resume and cover letter for each position you want to apply for gets easier with tese tips.","craftedbygc","Green Chameleon",["Date","2022-07-15T00:00:00.000Z"],[605],{"id":195,"collection":9},"Resumes and cover letters for web developers (or anyone else)","In my [previous post](/post/web-developer-job/), I wrote about what you would need to learn to get a job as a web developer. In this post, let's look at two items you'll need to create: a resume and a cover letter.\n\nMany people think writing a resume and/or cover letter is a once-and-done task, but it’s not. Ideally, you should customize both for each job. Here are some of the practical tips I used to land my current position.\n\n## Resume\n\n### Starter Resume\n\nWhile each job application should have a customized resume, you should create a starter resume with everything on it. You won't send this resume to anyone, but it serves as a starting place for the resume you will send. As you write customized items for each job experience on your application resume, you can copy/paste them onto this starter for possible future use.\n\n### Action verbs\n\nWhen listing out what you did in a previous job, use action verbs at the beginning of each bullet point.\n\nInstead of writing “responsible for supporting staff” you would instead write “supported 75 staff members”. Always start with a verb.\n\nDon’t just continually use the same verb either. For developers, it’s easy to have everything start with “built” or “developed”. Use a thesaurus and branch out a little, but don’t get too crazy.\n\nImportant: use a spelling and grammar checker. Don’t submit a resume or cover letter with easy-to-catch mistakes.\n\n### Measure Results\n\nNotice in the rewrite I posted above, that I used the specific number of staff supported. A better example would display the results of your work. “Reduced stylesheet size by 40%, saving the company $6,000 annually in hosting fees”.\n\nBe specific and show the measurable effects of your work. However, don’t exaggerate. If you don’t know, don’t put it on there. If you lie, they will find out and you obviously won’t get the job.\n\n### Job posting keywords\n\nWhen the employers use specific words to describe the requirements, use those keywords when describing your experience.\n\nIf they say they want someone who “partners with internal stakeholders”, then, if u you’d have that experience, you would want a bullet point description of how you partnered with someone within your organization.\n\nDon’t be funny or cute. Keep it simple and professional. It’s only funny to you.\n\nAvoid buzz words like “go-getter” and “self-starter” unless it’s in the job description. Recruiters see hundreds of resumes a day and these do not help you stand out.\n\n### Contact Info\n\nPut your contact info at the top. Make sure it’s accurate and up-to-date. Don’t have them call a phone number that doesn’t work.\n\nUse a more professional-sounding email address. annabanana79@gmail.com is not as good as anna.smith@gmail.com.\n\n### Design\n\nSimple, simple, simple. Don’t get crazy and over-design this thing. Avoid graphics and photos.\n\nDon’t add the skills graphs with 100% HTML, etc. that’s all made up and doesn’t make you stand out in a good way.\n\nAt least, have sections for experience, education, and contact info. You can optionally have some kind of statement at the top about what kind of position you’re seeking.\n\nIn any case, do what you can to keep this to one page. Two at the absolute most. One way to help with that is to be concise. Don’t write a paragraph or even a long sentence when you can say it in five words.\n\nKeep the font simple and easy to read. Not too big and not too small.\n\n## Cover Letter\n\nThe cover letter should use many of the same tips:\n\nKeep it easy to read and not too wordy\nUse the description keywords\nCustomize the letter to the job\n\nWhen I wrote my last cover letter, I used a brilliant template that was like a helpful, professional mad-libs fill-in-the-blank. Here it is (from [themuse.com](https://www.themuse.com/amp/advice/the-perfect-cover-letter-template-to-show-off-your-skills)):\n\n> Dear [Name],\n>\n> With the utmost enthusiasm, I would like to express my interest in the [position title] position at [Company]. My interest in [field, industry, or other theme] has taken me from [experience] to [experience]. I believe that my passion for [aspect of your field or background], strong commitment to [aspect of your field or background], and interest in [aspect of your field or background] make me an ideal candidate to join the [department] staff at [Company].\n>\n> There are several skills I’d immediately bring to the table, as I am:\n>\n> An effective [descriptor that reflects transferable skill #1]: In my role as a [previous job] at [Company], I [action or accomplishment]. I was also able to showcase my [skill] abilities as a [role] in [project name] project by [what you did].\n>\n> A disciplined [descriptor that reflects transferable skill #2]: I have always displayed my careful approach to [job duty] by [action]. At [Previous Company], I frequently [action]. In addition, I had the opportunity to [action or accomplishment], which further shows my dedication to [aspect of your field].\n>\n> A passionate [descriptor that reflects transferable skill #3]: Everything I have engaged in so far has been driven by my keen interest in [aspect of your field]. Even as a [previous role], I made sure to dedicate some part of my day to [action]. It is this passion that has motivated every one of my career decisions thus far.\n>\n> I look forward to contributing my skills and experiences to the [position title] position at [Company] and hope to have the opportunity to speak with you further about how I can be an asset to your team.\n>\n> Sincerely,\n>\n> [Your Name]\n\nUsing that template, the response I got was (quote):\n\n“…your application cover was super, thanks for taking the time to write that. Your energy and enthusiasm oozed out of it!”\n\nYou don’t have to use that exact one, but something like that can make cover letters much easier to write and less intimidating.\n\n## Conclusion\n\nYou can see customizing your resume and cover letter for each position you apply for doesn't have to be laborious. In my next post, I'll cover my experience doing interviews and what you can do to prepare.","src/content/blog/resumes-and-cover-letters.mdx","89909a4330c86172","resumes-and-cover-letters.mdx","set-dashboard-column",{"id":611,"data":613,"body":620,"filePath":621,"digest":622,"legacyId":623,"deferredRender":25},{"category":614,"description":615,"heroAccount":616,"heroPhotographer":617,"pubDate":618,"title":619},[15],"I needed to customize the layout of the WordPress Dashboard for every user. Thankfully, there hooks and filters that make it easy.","alexread","Alex Read",["Date","2011-08-11T00:00:00.000Z"],"How to Set Dashboard to Use One Column","I'm working on a plugin where I need the Dashboard to have one column for all users. While I could log into every user and change their Screen Options to one column, it would take next to forever with thousands of students accessing this site. Thankfully, I found this bit of code on [Stackexchange](https://wordpress.stackexchange.com/questions/4552/how-do-i-force-a-single-column-layout-in-screen-layout) (thanks sorich87!) and modified it for the Dashboard page. This will force all users to have one column on the Dashboard.\n\n```php\nfunction screen_layout_columns($columns) {\n    $columns['dashboard'] = 1;\n\n    return $columns;\n}\n\nadd_filter('screen_layout_columns', 'screen_layout_columns');\n\nfunction screen_layout_dashboard() {\n    return 1;\n}\n\nadd_filter('get_user_option_screen_layout_dashboard', 'screen_layout_dashboard');\n```\n\n[Gist of the code above](https://gist.github.com/slushman/dafa494f9d76ce4252b5)","src/content/blog/set-dashboard-column.mdx","b7945faa7b893328","set-dashboard-column.mdx","returning-submit-button",{"id":624,"data":626,"body":633,"filePath":634,"digest":635,"legacyId":636,"deferredRender":25},{"category":627,"description":628,"heroAccount":629,"heroPhotographer":630,"pubDate":631,"title":632},[15],"The WordPress submit_button function normally echos the submit button. Find out how to return it, like from a function, instead.","joshcala","Josh Calabrese",["Date","2013-01-17T00:00:00.000Z"],"Returning a submit button","In WordPress, the submit_button() function echoes a submit button. However, there are occasions where one might need a submit button, but not echoed. Like when returning a form from a function. For those occasions, use the [get_submit_button()](https://codex.wordpress.org/Function_Reference/get_submit_button) function instead. get_submit_button() accepts the same arguments as submit_button(), but returns instead of echoing.","src/content/blog/returning-submit-button.mdx","26bc77d5049189ad","returning-submit-button.mdx",{"id":424,"data":638,"body":650,"filePath":651,"digest":652,"legacyId":653,"deferredRender":25},{"category":639,"description":640,"heroAccount":641,"heroPhotographer":642,"pubDate":643,"relatedPosts":644,"title":648,"videoURL":649},[414,415],"Examine both sides of the age-old developer debate about whether code should be commented or not.","officestock","Sebastian Herrmann",["Date","2023-06-02T00:00:00.000Z"],[645,646,647],{"id":420,"collection":9},{"id":422,"collection":9},{"id":408,"collection":9},"Should You Comment Code Or Not?","https://www.youtube.com/watch?v=PdJo3OJEBA0","Code comments can be a valuable tool for developers, helping to enhance the understanding and maintainability of software projects. However, knowing when to comment your code and when to refrain from doing so is equally important. In this article, we will explore the scenarios where code comments can be beneficial and the situations where they may not be necessary.\n\n## When to Comment Your Code\n\n### Follow conventions\nCommenting your code becomes essential when it comes to adhering to coding conventions. Conventions define the agreed-upon standards for formatting, style, and structure within a codebase. If your code deviates from these conventions for a specific reason, commenting can help explain the rationale behind the departure.\n\nIn addition, some projects and companies prefer to their comment code, so if you're contributing to their code, it's important to follow the project or company conventions.\n\n### Create documentation\nCode comments are an excellent way to provide supplementary documentation for your codebase. They can explain the purpose and usage of certain functions, classes, or modules, making it easier for other developers to understand and utilize your code. Documentation comments are especially valuable when working on collaborative projects or when sharing code with others.\n\n### Explain business rules, design decisions, or \"the why\"\nIn complex software systems, there are often business rules and design decisions that may not be immediately evident from the code alone. Comments can help explain the reasoning behind these choices, providing valuable context for future developers who may need to modify or extend the codebase. Including comments that clarify the \"why\" behind certain code sections can save time and reduce confusion in the long run.\n\n## When Not to Comment Your Code\n\n### When it goes against convention\nWhile commenting can be helpful for deviations from coding conventions, or is the preference for a project or at a company, it's essential to evaluate whether the deviation truly warrants an explanation. If the unconventional code is easily understandable or follows an alternative best practice, commenting might not be necessary and could clutter the codebase unnecessarily.\n\n### When it explains what the code does\nIdeally, your code should be self-explanatory through its structure, variable naming, and overall readability. In such cases, adding comments that merely reiterate what the code is doing can be redundant and add clutter. Instead, focus on writing clean and concise code that is easily understood by others without the need for comments.\n\n### When you could refactor your code to be more understandable\nIn some cases, rather than relying on comments, it may be more beneficial to refactor your code to improve its clarity and readability. By restructuring the code, breaking it into smaller functions or modules, and utilizing descriptive variable or function names, you can make your code more self-explanatory. This approach not only reduces the need for excessive comments but also enhances the overall maintainability and comprehensibility of the codebase.\n\n## Conclusion\n\nCommenting code can be a valuable practice when done judiciously and in the appropriate situations. Following coding conventions, creating documentation, and explaining business rules and design decisions are all valid reasons to include comments in your code. However, it's equally important to avoid unnecessary comments when they merely duplicate what the code already expresses or when they can be replaced by refactoring the code for improved readability.","src/content/blog/should-you-comment-code-or-not.mdx","b68e7437aae9e8fb","should-you-comment-code-or-not.mdx","ten-common-html-mistakes",{"id":654,"data":656,"body":665,"filePath":666,"digest":667,"legacyId":668,"deferredRender":25},{"category":657,"description":659,"heroAccount":660,"heroPhotographer":661,"pubDate":662,"title":663,"videoURL":664},[658],"HTML","Avoid these common mistakes to write cleaner, more accessible, and future-proof HTML.","rojekilian","Sarah Kilian",["Date","2023-07-14T00:00:00.000Z"],"Ten Common HTML Mistakes","https://www.youtube.com/watch?v=Ad4-qpAK2J8","HTML (Hypertext Markup Language) is the foundation of the web, allowing us to create and structure web pages. However, even seasoned developers can make mistakes when working with HTML. In this article, we'll explore ten common mistakes people make in HTML and how to avoid them.\n\n## 1. Missing Character Encoding\n\nOne of the most common mistakes is forgetting to specify the character encoding of the HTML document. This can lead to rendering issues, especially when handling special characters or different languages. To avoid this mistake, always include the following meta tag within the head of your HTML document:\n\n```html\n\u003Cmeta charset=\"UTF-8\">\n```\n\n## 2. Missing Lang Attribute\n\nThe `lang` attribute is essential for indicating the language of the web page. It helps search engines and screen readers understand the content correctly. Make sure to include the `lang` attribute within the opening `html` tag, like this:\n\n```html\n\u003Chtml lang=\"en\">\n```\n\nReplace \"en\" with the appropriate language code for your content.\n\n## 3. Improperly Formatted Tags\n\nImproperly formatted tags can cause issues with the structure and rendering of your HTML. Some common mistakes include:\n\n- Missing closing tags: Always ensure that each opening tag has a corresponding closing tag.\n- Mixing up self-closing and non-self-closing tags: Self-closing tags, like `\u003Cimg />` and `\u003Cbr />`, should not have closing tags, while others, like `\u003Cdiv>`, require both opening and closing tags.\n- Not using double quotes for attribute values: Attribute values should be enclosed in double quotes, like this: `\u003Cimg src=\"image.jpg\" alt=\"Description\">`.\n\nAlways double-check your tags to ensure they are properly formatted.\n\n## 4. Using Unsupported or Deprecated Tags and Attributes\n\nHTML evolves over time, and some tags and attributes become deprecated or unsupported in modern browsers. Avoid using tags like `\u003Cmarquee>` and `\u003Cblink>`, as well as deprecated attributes like `marginwidth` on the `body` element or using `border=0` to style tables.\n\nStay up-to-date with HTML standards and use supported tags and attributes for better compatibility and future-proofing your code.\n\n## 5. Using Head Tags Outside the Head\n\nThe `\u003Chead>` section of an HTML document contains metadata and other important information about the page. It should only include elements like `\u003Ctitle>`, `\u003Cmeta>`, and `\u003Clink>`. These elements should only be used inside `\u003Chead>`.\n\nAvoid placing other tags, such as `\u003Cdiv>` or `\u003Cp>`, directly within the `\u003Chead>`. Keep the `\u003Chead>` section clean and focused on metadata and relevant information.\n\n## 6. Missing Alt Attributes on Image Tags\n\nImages play a crucial role in web design, but forgetting to add the `alt` attribute to the `\u003Cimg>` tag is an unfortunately common accessibility issue. The `alt` attribute provides alternative text that describes the image when it cannot be displayed or for visually impaired users.\n\nAlways include descriptive and meaningful `alt` attributes to ensure accessibility and enhance SEO.\n\n## 7. Making Spaces with Tags\n\nCreating spaces using inappropriate tags can result in poor code quality and unnecessary markup. Some examples include using multiple `\u003Cbr>` tags or empty `\u003Cp>` tags. Instead, use CSS for spacing purposes or consider using appropriate HTML elements like `\u003Cdiv>` with proper styling.\n\nSeparate content and presentation by using HTML for structure and CSS for styling.\n\n## 8. Misusing Tags\n\nMisusing tags is a common mistake, such as placing block-level elements inside inline elements or using incorrect markup for lists, forms, headings, and tables. Each of these topics requires in-depth exploration and will be covered in separate articles.\n\nMake sure to learn and understand the proper usage of HTML tags to maintain a well-structured and semantically meaningful document.\n\n## 9. Missing Script Type\n\nWhen including JavaScript code within your HTML document, always specify the `type` attribute for the `\u003Cscript>` tag. For modern JavaScript, use the `type=\"module\"` attribute. If you're using traditional JavaScript, set the `type` attribute to `text/javascript`.\n\nIncluding the `type` attribute ensures proper handling and interpretation of your scripts.\n\n## 10. Not Using Semantic Tags\n\nSemantic tags provide meaning and context to the structure of your HTML document. Instead of using generic tags like `\u003Cdiv>` for everything, consider using semantic tags like `\u003Cheader>`, `\u003Cnav>`, `\u003Carticle>`, and `\u003Cfooter>` to improve accessibility and search engine optimization.\n\nTake advantage of HTML5's semantic elements to enhance the readability and structure of your code.\n\n## Conclusion\n\nBy avoiding these common mistakes, you can write cleaner, more accessible, and future-proof HTML code. Remember to always double-check your markup, stay up-to-date with web standards, and follow best practices to create exceptional web experiences.","src/content/blog/ten-common-html-mistakes.mdx","5a8310c7ce565eb5","ten-common-html-mistakes.mdx","six-steps-secure-your-wordpress-site",{"id":669,"data":671,"body":679,"filePath":680,"digest":681,"legacyId":682,"deferredRender":25},{"category":672,"description":674,"heroAccount":675,"heroPhotographer":676,"pubDate":677,"title":678},[673],"Security","How is breakdancing related to securing your WordPress site? Find out inside, then read these six steps to secure your WordPress site.","cristina_gottardi","Cristina Gottardi",["Date","2013-04-16T00:00:00.000Z"],"Six Steps to Secure Your WordPress Site","import Youtube from \"../../components/Youtube.astro\";\n\nThere's a great breakdancing move called 6-step. If you've seen breakdancing, you've probably seen this before, but, like me, didn't know what to call it. Basically, the dancer supports himself on his arms while moving his feet around in a circle. It's great for getting momentum and launching other moves.\n\n\u003CYoutube videoId=\"zPdQ1gN7Ngo\" />\n\nWhy do I bring this up? You may have heard about the ongoing attacks against WordPress sites. It appears someone is using up to 90,000 different IP addresses to launch brute-force attacks against sites built with WordPress and are gaining access to some sites. Stupidly, they are trying to gain access with the username \"admin\" and trying to figure out the password for that user.\n\nHere's the WP 6-step, which will help secure your WordPress site against attacks:\n\n## Get Rid of admin\n\n1. If you have a username \"admin\" on your site, create another administrator user with a different name, log in as that user, and delete \"admin\". If you don't have a user named \"admin\", attackers will just waste their time attacking your site. From my first-hand experience, changing this is extremely important to make your site secure. Attackers always start by using the \"admin\" username. Just having it as a valid account will leave you vulnerable.\n\n## Beef-Up Passwords\n\n2. While standard practice for a secure password is to use eight digits with a mix of lowercase and uppercase letters, numbers, and symbols - there's a better way. Create a password from a story. Something memorable to you. Something people can't easily find out without knowing you personally.\n\nAs an example: My band and I played a show in Johnson City, TN at a coffee shop and while we played one song, this guy gets up and starts dancing. He was probably in his late 50's and he's doing this wiggly, hippie dancing literally feet from us. We were trying not to die laughing while finishing the song. After the show, we discovered the coffee shop owner also owned the laundromat next door and had to go fix a washer. Did I mention it took an hour longer than normal to get there because a bunch of big rigs crashed on the same stretch of highway?\n\nSome passwords one could glean from this story: DanceWasherBigRigCoffee, CoffeeWasherJohnsonLaundry, HighwayCoffeeDanceHippie, etc. See how easy that is to come up with a secure password? You could then throw in the year and an exclamation point, just to have all the traditional password requirements too. Attackers wouldn't know the story and the password length is over 15 digits, making it's basically impossible to figure out using a brute-force attack.\n\n## Limit Login Attempts\n\n3. Part of this current attack is trying different passwords over and over again until they get it correct. While its silly WordPress allows this, you don't have to. There are several great security plugins that allow you to limit login attempts before locking that IP address out of your WordPress site:\n\n- [Better WP Security iThemes Security](https://wordpress.org/plugins/better-wp-security/)\n- [WordFence](https://wordpress.org/plugins/wordfence/)\n- [Limit Login Attempts](https://wordpress.org/plugins/limit-login-attempts/)\n\nI'm sure there are more, but those are three I have experience with. Each has their benefits and shortcomings, but anything you can do to thwart an attacker and secure your site is a good thing.\n\n## Use Caching\n\n4. WordPress, by itself, is pretty good, but it still needs to talk to the database to load each page. Caching plugins make copies of everything so your site loads faster. While it doesn't seem like this can help make your site secure, this can prevent certain types of attacks as well as sudden increases in popularity.\n\n## Update, Update, Update\n\n5. This is standard WordPress advice: keep WordPress, plugins, and themes up-to-date. I usually advise people to check once a week. You should be adding content each week anyway, so knock out both at the same time.\n\n## Delete Unused Plugins and Themes\n\n6. While this won't help much with the current attack, these unused items could cause problems in the future. And if you're not using them, why keep them around?\n\nSee? Six simple steps and you're more secure and don't need to worry about people attacking your site. Yeah ok, I'm not a comedian and the dance thing was random. But seriously, take steps to secure your site before you have to call someone like to me to fix it.","src/content/blog/six-steps-secure-your-wordpress-site.mdx","5217322d50c9d8e4","six-steps-secure-your-wordpress-site.mdx","simplemap-shortcode-reference",{"id":683,"data":685,"body":692,"filePath":693,"digest":694,"legacyId":695,"deferredRender":25},{"category":686,"description":687,"heroAccount":688,"heroPhotographer":689,"pubDate":690,"title":691},[15],"The WordPress plugin SimpleMap doesn't have great documentation. This post stands as the unofficial shortcode documentation.","dead____artist","Capturing the human heart.",["Date","2015-01-08T00:00:00.000Z"],"SimpleMap Shortcode Reference","I've been using a plugin called SimpleMap for clients recently. SimpleMap creates a custom post type for managing locations (think store locations) and displays a Google Map with those locations. It also uses Google Map's radius search to help people find locations near them. Everything on the front-end is managed using a [shortcode](https://codex.wordpress.org/Shortcode). Practically every setting in SimpleMap can be overridden in the shortcode, which is really cool for us developers. Plus, they have tons of filters throughout, so any text or label can be customized for your usage. While the \"Help\" tab in the plugin settings shows you some of the options available with the shortcode, there are tons more and the documentation is practically non-existent. I'm putting this out there, at least for my own reference and I'll keep adding to it as I learn more and/or have time to expand it.\n\nThe code below explains how to use the shortcode and the more common attributes to use with it.\n\n```php\n/**\n * Basic shortcode\n */\n[simplemap]\n\n/**\n * Hide the search result list\n *\n * @param\tbool\ttrue: hide the list\n *\t\t\tfalse: show the list, this is the default\n */\n[simplemap hide_list=true]\n\n/**\n * Hide the map\n *\n * @param\tbool\ttrue: hide the map\n *\t\t\tfalse: show the map, this is the default\n */\n[simplemap hide_map=true]\n\n/**\n * Hide the search form\n *\n * @param\tbool\ttrue: hide the search form\n *\t\t\tfalse: show the search form, this is the default\n */\n[simplemap hide_search=true]\n\n/**\n * Limits the search results list to locations from the specified category or categories.\n *\n * @param\tint\tA comma-separated list of category IDs.\n *\t\t\tDo not put spaces between the IDs, just a comma\n */\n[simplemap sm_category=8] \t// one category\n[simplemap sm_category=8,9,10] \t// mutiple categories\n\n/**\n * Displays a checkbox for each category as part of the search form.\n * Allows the site visitor to filter the search results by category.\n *\n * @param\tbool\ttrue: show the category filters\n *\t\t\tfalse: hide the category filters, this is the default\n */\n[simplemap show_sm_category_filter=true]\n\n/**\n * Specify which fields are included in the search form\n *\n * The search form is built in a table.\n *\n * Put \"||\" between each field.\n *\n * Here are the options for requesting a field:\n * \"labelbr_\": puts the label with a break return tag afterwards\n * \"labelsp_\": puts the label with a space afterwards\n * \"labeltd_\": puts the label and field in separate table cells.\n * \"\" (blank): puts no label, just the field itself.\n *\n * The fields that you can include are:\n *  street\n *  city\n *  state\n *  zip\n *  country\n *  distance: the select menu for the search radius\n *  empty: puts an empty table cell (useful for formatting the search form properly)\n *  submit: the submit button. If you don't include this, a hidden button will be added for you.searc\n *  taxonomy: include the filters for a specific taxonomy. There are four defaults:\n *    \"sm-category\"\n *    \"sm-tags\"\n *    \"sm-day\"\n *    \"sm-time\"\n */\n[simplemap search_fields=labelbr_street||labelbr_city||labelbr_state||labelbr_zip||labelbr_country||labelbr_distance]\n\n/**\n * Changes the name of the search form.\n * Default is \"Find Locations Near:\"\n */\n[simplemap search_title=\"Search this\"]\n\n/**\n * Changes the number of default table cells.\n *\n * Default value is 3.\n *\n * NOTE: This one doesn't seem to work for me.\n */\n[simplemap search_form_cols=4]\n\n/**\n * Changes the field format for the taxonomies.\n *\n * Accepts \"checkboxes\" or \"select\". Default is \"checkboxes\".\n */\n[simplemap taxonomy_field_type=\"select\"]\n\n/**\n * Sets the default latitude. Default is \"44.968684\".\n * Ideally, use with default_lng.\n */\n[simplemap default_lat=\"39.840315\"]\n\n/**\n * Sets the default longitude. Default is \"-93.215561\".\n * Ideally, use with default_lat.\n */\n[simplemap default_lng=\"-88.954800\"]\n\n/**\n * Sets the map width. Default is 100%.\n */\n[simplemap map_width=\"60%\"]\n\n/**\n * Sets the map height. Default is 350px.\n */\n[simplemap map_height=\"300px\"]\n\n/**\n * Sets the measurement units.\n * Accepts \"km\" for kilometers or \"mi\" for miles. Default is \"mi\".\n */\n[simplemap units=\"mi\"]\n\n/**\n * Sets the radius for the search. Default is 10.\n * Use an integer and no unit.\n */\n[simplemap radius=12]\n\n/**\n * Limits the quantity of how results are returned.\n * Use an integer. Default is 20.\n */\n[simplemap limit=12]\n\n/**\n * Quantity of results to autoload.\n * Use an integer. Default is \"all\".\n */\n[simplemap autoload=12]\n\n/**\n * Like most shortcodes, to add multiple attributes, put a space between them\n */\n[simplemap hide_list=true hide_map=true hide_search=true sm_category=8,9,10]\n```\n\n[Gist of the code above](https://gist.github.com/ff5a7066490335e59929)","src/content/blog/simplemap-shortcode-reference.mdx","0aeb0bf8d1415a61","simplemap-shortcode-reference.mdx",{"id":270,"data":697,"body":710,"filePath":711,"digest":712,"legacyId":713,"deferredRender":25},{"category":698,"description":699,"heroAccount":700,"heroPhotographer":701,"pubDate":702,"relatedPosts":703,"title":709},[259],"Understanding the structure of the boilerplate makes building your plugin much easier. Learn how the boilerplate structures your plugin.","alain_pham","Alain Pham",["Date","2017-05-29T00:00:00.000Z"],[704,705,706,707,708],{"id":266,"collection":9},{"id":268,"collection":9},{"id":272,"collection":9},{"id":274,"collection":9},{"id":255,"collection":9},"The Structure of the WordPress Plugin Boilerplate","In the [previous post](/post/why-use-the-boilerplate/) of the [WordPress Plugin Boilerplate series](/post/guide-using-wordpress-plugin-boilerplate/), we looked at why one would use the boilerplate. This post will explore the organized structure in more detail.\n\nThe structure makes plugin development more predictable and easier to maintain in the future. The boilerplate organizes files into four main folders:\n\n## Plugin Folder\n\n![WordPress Plugin Boilerplate Main Folder](/post/the-structure-of-the-wordpress-plugin-boilerplate/wp-plugin-boilerplate-root-folder.png)The main plugin folder contains basic files for creating a WordPress plugin.\n\n### Main Plugin File\n\nThis file contains the comments describing what it does, who authored it, the current version, etc. The boilerplate also uses the PHPDoc versions of those same properties.\n\nThis file also registers the activation and deactivation hooks, then runs the main plugin file.\n\n### readme.txt file\n\nA required file for any WordPress plugin. It describes what the plugin does, who authored it, as well as a changelog and versioning information.\n\n### GPL 2.0 license\n\nThe boilerplate uses the GPL 2.0 license which is the same license as WordPress. A copy of the license is a wise thing to include in your plugin.\n\n### index.php file\n\nThe index.php file is internationally blank. Some developers have questioned the necessity of including this file. However, many experienced developers have explained a file like this helps with security concerns.\n\n### uninstall.php file\n\nPlugins usually remove settings and other database-related features in the uninstall file.\n\n## Languages\n\n![WordPress Plugin Boilerplate Languages Folder](/post/the-structure-of-the-wordpress-plugin-boilerplate/wp-plugin-boilerplate-languages-folder.png) The languages folder contains all the files needed for translations. The boilerplate includes an empty .pot file for translations. You can optionally include additional .pot files containing the translated strings.\n\n## Admin & Public\n\n![WordPress Plugin Boilerplate Public Folder](/post/the-structure-of-the-wordpress-plugin-boilerplate/wp-plugin-boilerplate-public-folder.png) ![WordPress Plugin Boilerplate Admin Folder](/post/the-structure-of-the-wordpress-plugin-boilerplate/wp-plugin-boilerplate-admin-folder.png) Since both the admin and public folders have the same structures, I'll explain both at once. The admin and public classes have the same structure and methods, but keep the different concerns separated.\n\n### class-plugin-name-admin.php & class-plugin-name-public.php\n\nThis is the main class. Most of the plugin code will reside in one or both of these files.\n\n### partials\n\n![WordPress Plugin Boilerplate Admin Partials Folder](/post/the-structure-of-the-wordpress-plugin-boilerplate/wp-plugin-boilerplate-admin-partials-folder.png) The partials subfolder contains PHP files with the output HTML code. For example, displaying a settings page in the admin requires using two files. The WordPRess API code resides in the admin class, but the HTML output would be in a partial file.\n\n### JS\n\n![WordPress Plugin Boilerplate Admin JS Folder](/post/the-structure-of-the-wordpress-plugin-boilerplate/wp-plugin-boilerplate-admin-js-folder.png) This folder contains all the Javascript files for the plugin.\n\n### CSS\n\n![WordPress Plugin Boilerplate Admin CSS Folder](/post/the-structure-of-the-wordpress-plugin-boilerplate/wp-plugin-boilerplate-admin-css-folder.png) This folder contains all the CSS files for the plugin.\n\n## Includes\n\n![WordPress Plugin Boilerplate Includes Folder](/post/the-structure-of-the-wordpress-plugin-boilerplate/wp-plugin-boilerplate-includes-folder.png) The includes folder is Tom's answer for where to put code that isn't exclusive to the admin or public. A common question prior to version three was where to put code for features that are both public and admin, like widgets.\n\n### class-plugin-name.php\n\nThis is the main plugin file. All the plugin's WordPress hooks register through the Loader class here. All the class files become available throughout the plugin in this file as well.\n\nThe constructor sets the class variables. plugin_name is for naming things, like enqueueing stylesheets, and version is for caching busting scripts and stylesheets. Then these four methods run:\n\n- load_dependencies(): includes each of the classes used in the plugin. Instantiates the loader class.\n- set_locale(): contains the hooks for translation using methods in the i18n class.\n- define_admin_hooks(): contains the hooks for the plugin admin using methods in the admin class.\n- define_public_hooks(): contains the hooks for the public-facing parts of the plugin using methods in the public class.\n\n### class-plugin-name-activator.php\n\nContains any code that runs during plugin activation.\n\n### class-plugin-name-deactivator.php\n\nContains any code that runs during plugin deactivation.\n\n### class-plugin-name-i18n.php\n\nLoads and defines the internationalization files for this plugin so all the strings are ready for translation.\n\n### class-plugin-name-loader.php\n\nThis is the big new feature of version three. The loader class takes all the hooks defined in the main plugin file and registers them with WordPress.\n\nIn the next post, we'll examine the loader class in detail and how it differs from writing normal WordPress hooks.","src/content/blog/the-structure-of-the-wordpress-plugin-boilerplate.mdx","f34a4152c1647cc9","the-structure-of-the-wordpress-plugin-boilerplate.mdx","troubleshooting-wordpress-ajax",{"id":714,"data":716,"body":723,"filePath":724,"digest":725,"legacyId":726,"deferredRender":25},{"category":717,"description":718,"heroAccount":719,"heroPhotographer":720,"pubDate":721,"title":722},[99],"Troubleshooting AJAX issues in WordPress is tricky. Use these two ways (and a tip) to debug AJAX issues while building your plugin or theme.","alx_andru","Alex",["Date","2018-05-28T00:00:00.000Z"],"Troubleshooting WordPress AJAX","I was working with some AJAX functionality a while back and started writing down the problems and solutions I ran across so they were all in one place. Basically, this post is for my future self. I hope you find it useful as well. :)\n\n## Specific Problems\n\n### Function Always Returns 0\n\nIf you're getting a \"0\" as the response from an AJAX call in the admin, it's most likely one of three things:\n\n- WordPress can't find the function you've hooked.\n- You don't have a wp_die() at the end of the PHP function.\n- The action isn't in the data you're sending to the PHP function.\n\n### 403 Forbidden Error\n\nCheck the Nonce. You probably copied it from another function and it's checking the wrong one.\n\n## Helpful Tip\n\nThe PHP function that processes the AJAX request has to echo something and should end with:\n\n```php\nwp_die();\n```\n\nYou can use that to return something you want to see, like what data was passed to the function.\n\nTo check an array, use this instead:\n\n```php\nwp_die(print_r($some_array));\n```","src/content/blog/troubleshooting-wordpress-ajax.mdx","55cbdfae99969dc4","troubleshooting-wordpress-ajax.mdx",{"id":272,"data":728,"body":739,"filePath":740,"digest":741,"legacyId":742,"deferredRender":25},{"category":729,"description":730,"heroAccount":230,"heroPhotographer":231,"pubDate":731,"relatedPosts":732,"title":738},[259],"Understand the central file for the WordPress Plugin Boilerplate, how it works, how to register hooks and filters, and additional parameters available.",["Date","2017-06-05T00:00:00.000Z"],[733,734,735,736,737],{"id":266,"collection":9},{"id":268,"collection":9},{"id":270,"collection":9},{"id":274,"collection":9},{"id":255,"collection":9},"Understanding the Loader Class","In the [previous post](/post/the-structure-of-the-wordpress-plugin-boilerplate/) of the [WordPress Plugin Boilerplate series](/post/guide-using-wordpress-plugin-boilerplate/), we walked through the structure. We also examined each file and what they do. The biggest feature of the version 3 rewrite is the new loader class.\n\nThe loader class loops through all the hook calls and registers them with WordPress all at once. The class consists of two class variables and four methods.\n\n## Class Variables\n\nEach of the class variables are arrays containing the hooks and their corresponding functions.\n\n### $actions\n\nAn array of the all actions to register with WordPress.\n\n### $filters\n\nAn array of the all the filters to register with WordPress.\n\n## Methods\n\nThere are only four methods in the loader class, not counting the constructor.\n\n### Constructor\n\nThe class constructor simply assigns a blank array to each of those class variables.\n\n### add_action()\n\nAdds the action passed to it to the $actions class variable using the add() method.\n\n### add_filter()\n\nAdds the filter passed to it to the $filters class variable using the add() method.\n\n### add()\n\nTakes the passed in hook and the other parameters and restructures everything into an array.\n\n### run()\n\nLoops through the $actions and $filters class variables and registers each hook with WordPress.\n\n### Summary\n\nThe main plugin class calls add_action() and add_filter() with the hook parameters. Each method passes parameters to the add() method, which collects all the hooks into respective class variables. The main plugin class calls the run() method, loops through the class variables, then registers the hooks with WordPress.\n\n## How to Register Hooks\n\nThe most confusing part of using the new loader class is properly registering hooks. While the boilerplate has methods named add_action() and add_filter(), they work differently than the [WordPress functions](https://developer.wordpress.org/reference/functions/add_action/).\n\nThe boilerplate gathers all the hooks to register them with WordPress all at once. Let's use the enqueue_styles declaration in define_admin_hooks() as an example.\n\nFirst, we have to create an instance of the admin class and assign it as the variable $plugin_admin. We also pass the plugin_name and version using the get_plugin_name() and get_version() methods in this class.\n\n```php\n$plugin_admin = new Plugin_Name_Admin($this->get_plugin_name(), $this->get_version());\n```\n\nNext, we use the add_action method in the Loader instance. Each hook registers separately with the loader class. In the load_dependencies() method, we assigned the instantiated loader class to the $loader class variable.\n\n```php\n$this->loader\n```\n\nSince enqueue_styles is an action hook, we use the add_action() method from the loader class.\n\n```php\n$this->loader->add_action\n```\n\nThis first parameter of the boilerplate's add_action method is the name of the hook. In this case, admin_enqueue_scripts.\n\n```php\n$this->loader->add_action('admin_enqueue_scripts',\n```\n\nThe second parameter of the add_action method is the class instance of our action.\n\n```php\n$this->loader->add_action('admin_enqueue_scripts', $plugin_admin,\n```\n\nFinally, we put the name of the method in the class where WordPress can find our action. In this case, the name of the method is enqueue_styles.\n\n```php\n$this->loader->add_action('admin_enqueue_scripts', $plugin_admin, 'enqueue_styles');\n```\n\n## Additional Loader Method Parameters\n\nThe loader class accepts two additional parameters: the hook priority and the accepted arguments. Both are optional and in this case, we're not using either. However, a complete example would be:\n\n```php\n$this->loader->add_action('admin_enqueue_scripts', $plugin_admin, 'enqueue_styles', 10, 1);\n```\n\nFinally, in the admin class, the enqueue_styles() method contains:\n\n```php\nwp_enqueue_style($this->plugin_name, plugin_dir_url(__FILE__) . 'css/plugin-name-admin.css', array(), $this->version, 'all');\n```\n\nThis is the standard way to enqueue a CSS file into the WordPress admin through the plugin boilerplate methods.\n\n## Summary\n\nWe have seen how the loader class works and the proper way to register a hook.\n\nIn future posts, we will learn how to create various plugin features using the boilerplate. Let's start by creating the WP Starter Plugin by using the plugin generator.","src/content/blog/understanding-loader-class.mdx","08a9e592497834ed","understanding-loader-class.mdx",{"id":274,"data":744,"body":757,"filePath":758,"digest":759,"legacyId":760,"deferredRender":25},{"category":745,"description":746,"heroAccount":747,"heroPhotographer":748,"pubDate":749,"relatedPosts":750,"title":756},[259],"Learn how to start your next plugin simpler and faster using the WordPress Plugin Generator, including all the options and what they mean.","yory","Ryo Yoshitake",["Date","2017-06-12T00:00:00.000Z"],[751,752,753,754,755],{"id":266,"collection":9},{"id":268,"collection":9},{"id":270,"collection":9},{"id":272,"collection":9},{"id":255,"collection":9},"Using the Plugin Generator","In the [previous post](/post/understanding-loader-class/) of the [WordPress Plugin Boilerplate series](/post/guide-using-wordpress-plugin-boilerplate/), we explored the loader class and how to properly register hooks. In this post, we will begin developing the WP Starter Plugin by using the plugin generator.\n\n[Enrique Chávez](https://enriquechavez.co/), a full-stack WordPress developer from Valle de Bravo, Mexico, built the WordPress Plugin Boilerplate Generator. You can find the plugin generator at [https://wppb.me/](https://wppb.me/).\n\n## Generating A Plugin\n\n![WordPress Plugin Boilerplate Generator Homepage](/post/using-plugin-generator/wordpress-plugin-boilerplate-generator-site.png)\n\nThe generator operates from a simple form. After hitting the Build Plugin button, the site returns a zip file of a boilerplate-based plugin. Let's start by looking at the form.\n\n### Plugin Name\n\nWe start with the name of your plugin. Here's what I entered for our example plugin: WP Starter Plugin.\n\n### Plugin Slug\n\nThe plugin slug becomes the translation string, the URL slug, and part of each class file name. Here's what I entered for our example plugin: wp-starter-plugin.\n\n### Plugin URI\n\nThe plugin URI is the web address where people can find more information about your plugin. Here are some ideas for this URL:\n\n- the github repo page\n- a dedicated plugin website URL\n- a page on your site\n\nI create a page on my site for each plugin I publish, so here's what I entered for our example plugin: `https://www.slushman.com/wp-starter-plugin`.\n\n### Author Name\n\nIn this field, enter the name of the plugin developer. This should be your wordpress.org username, especially if you plan to publish your plugin. Otherwise, you could use your proper name (ie Chris Wilcoxson) For our example plugin, I entered my wordpress.org username: slushman.\n\n### Author Email\n\nEnter a valid email address. If you plan to publish your plugin to the WordPress Plugin Directory, the directory admins will contact you through this email. Otherwise, people will most likely use this for support requests. For our example plugin, I entered my email.\n\n### Author URI\n\nThis is simply the author's website. For our example plugin, I entered the URL of this website: https://www.slushman.com.\n\n### Build Plugin\n\nFinally, click the Build Plugin button to build your plugin. The site should allow you to download the zip file of your new plugin.\n\n## Examine the Results\n\nOpen the zip file and check out the resulting plugin. You can see the plugin uses the boilerplate structure, except the classes now use your plugin slug. If you open some of the class files, you'll notice the translation strings use your plugin slug as well.\n\nI'm sure you can see the generator saves a good deal of time when starting a new plugin. Finding and replacing each string and filename isn't overly difficult, but it can be time consuming, especially if you miss one and get errors.\n\n## Wrapping Up\n\nIn the next post, we'll look at the final steps needed before actually beginning development. While the generator saved some time and manual labor, there are some parts of the plugin that require attention before moving on to development.","src/content/blog/using-plugin-generator.mdx","2316fb4cc609383e","using-plugin-generator.mdx",{"id":195,"data":762,"body":769,"filePath":770,"digest":771,"legacyId":772,"deferredRender":25},{"category":763,"description":764,"draft":25,"heroAccount":765,"heroPhotographer":766,"pubDate":767,"title":768},[188],"Learn the tech and skills you would need to land a job as a web developer in 2022.","flowforfrank","Ferenc Almasi",["Date","2022-07-08T00:00:00.000Z"],"How to get a job as a web developer","A few years back, I was working in IT and hated it. Thankfully, I was asked to build a website as a small work project and loved how it was both technical and creative. I started learning everything I could and eventually landed a job as a web developer. I’m now a software engineer working on web and mobile apps.\n\nIf this sounds like what you’d want to do, I want to give you very practice advice on how to get where I am. In the next few posts, there are three things I plan to cover:\n\nThe craft\nYour resume & cover letter\nInterviews\n\nWhile there are many industries you could work in and an infinity of languages to learn, I’ll just cover what to learn for web development; both websites and apps.\n\n## Languages To Learn\n\n### HTML & CSS\n\nHTML is the foundation of everything on the web. Whether building websites or web apps is your thing, everything is based on HTML and you’d be surprised how much it can do.\n\nCSS is the styling language for the internet. Combined with HTML, you can build great websites.\n\nSpecifically, I’d recommend the book [HTML & CSS: Design and Build Websites by Jon Duckett](https://amzn.to/3GRMTeh). It can be a slightly dry read but gives you a solid understanding of these foundational web technologies.\n\n### JavaScript & Typescript\n\nJavaScript opens up worlds of possibilities (and abuses) on the web. Most of the popular web frameworks, like React, are based on JavaScript. It’s better to start here and understand how it works.\n\nFrom there, learn Typescript, which makes your Javascript apps better and keeps you from making preventable mistakes.\n\nThere are tons of tutorials and courses for learning JavaScript and Typescript. So many I don’t have any specific recommendations.\n\nA while back I read [Typescript In 50 Lessons by Stefan Baumgartner](https://amzn.to/3mgKksO) and found it easy to understand.\n\n### React\n\nNow that you have the foundation of HTML, CSS, JavaScript, and Typescript, try React next. React came from Facebook, but is one of the most popular JavaScript-based frameworks for building web apps.\n\nAgain, there are loads of courses, books, etc. However, I think [Wes Bos](https://wesbos.com/courses) has pretty great courses. They are more expensive, but you get lifetime access and he’s a great teacher.\n\n## Other Things to Learn\n\n### Git and GitHub\n\nEvery reputable company uses some form of version control to manage its software. Git is easily the most popular and I have found it easy to use versus the other options. You don’t need to know everything there is to know about git and all its commands, but you should at least some basic things that allow you to create branches, stash changes, commit, and push to GitHub.\n\n#### Oh My Zsh\n\nAn optional tool to learn is [Oh My Zsh](https://ohmyz.sh). Zsh is a command-line scripting language, like bash, and Oh My Zsh has a bunch of git shortcuts that make working with git even easier.\n\n### Accessibility\n\nThis is one of the most overlooked aspects of developing for the web and that’s a shame. Accessibility isn’t about making things work for someone with a disability, it’s about making the web work better for everyone. When something works well for someone with a disability or impairment, it works well for everyone else too.\n\nAt the bare minimum, learn the [US Federal Section 508 standards](https://www.section508.gov) and how to implement them for web sites. When I did this the first time, I discovered these standards are just the best way to build any website.\n\n### Testing\n\nMaking your software reliable and trustworthy goes a long way towards becoming a better developer. One of the ways of doing that is testing, testing, testing.\n\nWhen I started at my current company, I knew nothing about testing, so I was thrown into the deep end. I spent my learning time every week writing tests for React components that didn’t have any. During that process, I found some bugs and was able to fix them. It also made our software that much more reliable and we were about to catch future mistakes because the tests showed a problem.\n\nI’ll talk a lot more about testing in future posts, but this is a great way to level up your career. If you want to get a head-start on my future posts, check out:\n\n- [Jest](https://jestjs.io)\n- [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/)\n- [Cypress](https://www.cypress.io)\n\nHaving a giant list of things to learn is nice, but it can be overwhelming. Especially if you’re not sure how to go about learning it all.\n\n## Three-Step Learning Process\n\n### Step One - find a course\n\nI am a learn-by-doing kind of person. Many courses and tutorials have you follow along while building something, which I think is very effective.\n\n- [Udemy](https://www.udemy.com)\n- [Free Code Camp](https://www.freecodecamp.org)\n- [Wes Bos](https://wesbos.com/courses)\n- [ui.dev](https://ui.dev)\n- [Frontend Masters](https://frontendmasters.com)\n\n### Step Two - immerse yourself in the community\n\nFind newsletters, Twitter accounts, blogs, YouTube channels, books, podcasts, or whatever else works for you and subscribe. While you may not understand everything at first, over time, concepts become more familiar and you are better able to keep up with changes in the languages and community.\n\n[CSS Tricks blog](https://css-tricks.com)\n[React Status newsletter](https://react.statuscode.com)\n[Front End Focus newsletter](https://frontendfoc.us)\n[Robin Wieruch blog](https://www.robinwieruch.de/blog/)\n[Rendezvous with Cassidoo newsletter/blog](https://cassidoo.co/newsletter/)\n[React Newsletter by ui.dev](https://reactnewsletter.com)\n\n### Step Three - build stuff\n\nIf you took a course or two, you probably built some projects while learning. Don’t stop there; practice makes progress. Build all kinds of projects and make sure you have them on your GitHub profile. Maybe find a non-profit and build something they need. Having these projects available publicly is great for future employers to see how you write code.\n\nI would also build several different types of things. Push your skills and try different approaches, methods, and technologies. Doing this forces you to learn and practice increasingly difficult things. When you work on real-world projects, you will run into complicated things that are well beyond what you will learn in tutorials and courses.\n\n### Bonus: Step Four - hone your craft\n\nThis step is an on/going process that should happen every time you write code. It will probably take years, so don’t expect to check it off your list. Ever.\n\nI can’t recommend the book Clean Code by Robert C Martin enough. I had heard some of these principles around but didn’t understand many of them. He clearly explains why and how to write better code and helps you become a better developer.\n\n## Conclusion\n\nNow that I have overwhelmed you with suggestions and information, in my next post I’ll write about what do to with your resumes (notice that’s plural) and cover letters.","src/content/blog/web-developer-job.mdx","ae87914a503d6f91","web-developer-job.mdx",{"id":138,"data":774,"body":785,"filePath":786,"digest":787,"legacyId":788,"deferredRender":25},{"category":775,"description":776,"heroAccount":777,"heroPhotographer":778,"pubDate":779,"relatedPosts":780,"title":784},[259,127],"Watch the video of my presentation about using the WordPress Plugin Boilerplate, get the slides, and follow along with the code samples.","mikael_k","Mikael Kristenson",["Date","2015-03-21T00:00:00.000Z"],[781,782,783],{"id":134,"collection":9},{"id":123,"collection":9},{"id":136,"collection":9},"Using WordPress Plugin Boilerplate","This afternoon, I presented \"Using WordPress Plugin Boilerplate\" at WordCamp Dayton. My presentation covered the new 3.0 version of the boilerplate. I want to make everything easy to find, so here are the links from my presentation, including my sample plugin \"Now Hiring\":\n\nPresentation: [/presentations/using-wp-plugin-boilerplate](/presentations/using-wp-plugin-boilerplate)\n\nSample plugin: [https://github.com/slushman/now-hiring](https://github.com/slushman/now-hiring)\n\nWP Plugin Boilerplate: [https://wppb.io](https://wppb.io)\n\nGenerator: [https://wppb.me](https://wppb.me)","src/content/blog/using-wordpress-plugin-boilerplate.mdx","365d42b0349a2acc","using-wordpress-plugin-boilerplate.mdx",{"id":174,"data":790,"body":804,"filePath":805,"digest":806,"legacyId":807,"deferredRender":25},{"category":791,"description":792,"heroAccount":793,"heroPhotographer":794,"pubDate":795,"relatedPosts":796,"title":803},[161],"Using results from the CSS Tool Parker, you can simplify the WordPress menu styling with a combination of custom classes and a menu walker.","mikphotopro","Dmitriy Adamenko",["Date","2016-10-27T00:00:00.000Z"],[797,798,799,800,801,802],{"id":168,"collection":9},{"id":170,"collection":9},{"id":157,"collection":9},{"id":172,"collection":9},{"id":176,"collection":9},{"id":178,"collection":9},"Simplifying WordPress Menu Styling","In the [previous post](/post/improving-underscores-stylesheet-using-parker/) in this [series about Parker](/post/parker-and-wordpress-theme-development/), we optimized parts of the \\_s stylesheet and improved our Parker scores. However, one of the more difficult optimizations by working on the menus. Simplifying menu styling involves more than just a stylesheet tweak though. We'll need to add some PHP code to underscores that adds classes to each menu ul tag, menu item, and menu item link.\n\n## The Menu\n\nThe styling for menus in \\_s involves some pretty insane selectors, like this one:\n\n```css\n.main-navigation ul ul li:hover > ul\n```\n\nLets look at how to add classes to each menu ul tag, menu item, and menu item link so we can reduce how many identifiers we use in each selector, improve our Parker scores, and simplify our stylesheet.\n\n### Menu Items and Links\n\nIn the inc/extras.php file, we're going to create two functions. The first adds classes to the menu items and the second adds classes to the links in each menu item.\n\n#### ADD DEPTH AS A MENU ITEM CLASS\n\nThe following function adds two classes, derived from the menu name and the menu item depth, to each menu item.\n\n```php\n/**\n * Adds a class with the menu name and depth level to each menu item.\n * Makes styling menus much easier.\n *\n * @hooked   nav_menu_css_class  10\n * @param    array   $classes  The current menu item classes.\n * @param    object  $item     The current menu item.\n * @param    array   $args     The wp_nav_menu args.\n * @param    int     $depth    The menu item depth.\n * @return   array   The modified menu item classes.\n */\nfunction _s_add_depth_to_menu_items($classes, $item, $args, $depth) {\n     if (empty($item)) { return $classes; }\n     $classes[] = $args->menu_id . '-item';\n     $classes[] = $args->menu_id . '-item-' . $depth;\n\n     return $classes;\n} // _s_add_depth_to_menu_items()\n\nadd_filter('nav_menu_css_class', '_s_add_depth_to_menu_items', 10, 4);\n```\n\nThe function first checks if the item is empty and returns if it is. We're not going to work invalid menu items.\n\nThe $classes parameter is an array, so we create the two new classes, add them to the array, and return the modified array. Here are examples of the resulting class names for a menu titled \"Primary Menu\":\n\n```css\n.primary-menu-item .primary-menu-item-0;\n```\n\nThe class that includes the depth changes for each menu item according to its depth in the menu:\n\n```css\n.primary-menu-item-1 .primary-menu-item-2 .primary-menu-item-3;\n```\n\nSo instead of using:\n\n```css\n.primary-menu ul ul ul li;\n```\n\nWe could use this to style just the menu items at this depth:\n\n```css\n.primary-menu-item-2\n```\n\nOr this to style the menu items at this depth and all its descendants:\n\n```css\n.primary-menu-item-1 li;\n```\n\nThis works great for the menu item, but what about the link inside the menu item?\n\n#### ADD DEPTH TO MENU ITEM\n\nThe following function adds two classes, derived from the menu name and the menu item depth, to each menu item link.\n\n```php\n/**\n * Adds classes to menu item links.\n * Adds the depth and menu name to make styling easier\n *\n * @hooked   nav_menu_link_attributes  10\n * @param    array   $atts   The current menu item link attributes\n * @param    object  $item   The current menu item\n * @param    object  $args   The wp_nav_menu args.\n * @param    int     $depth  The menu item depth.\n * @return   array   The modified menu item link attributes.\n */\nfunction _s_add_depth_to_menu_item_links($atts, $item, $args, $depth) {\n    if (empty($item)) { return $atts; }\n    $atts['class'] .= $args->menu_id . '-item-link ';\n    $atts['class'] .= $args->menu_id . '-item-link-' . $depth . ' ';\n    return $atts;\n} // _s_add_depth_to_menu_item_links()\n\nadd_filter('nav_menu_link_attributes', '_s_add_depth_to_menu_item_links', 10, 4);\n```\n\nThe function first checks if the item is empty and returns if it is. We're not going to work with invalid menu items.\n\nSince the classes for menu item links aren't arrays, like the menu items, we append each newly created class to the existing class string. In this case, I'm adding two new classes:\n\n- `{menu-name}`-item-link\n- `{menu-name}`-item-link-`{depth}`\n\nThis allows for styling menu links in this menu and menu links in this menu at any particular depth. So we can apply styles to:\n\n```css\n.primary-menu-item-link-2\n```\n\nRather than:\n\n```css\n.primary-menu ul ul ul li > a;\n```\n\n### Custom Menu Walker\n\nNow that we have the depth and menu name added to each menu item (li tag) and menu item link (a tag), we still need to add it to each menu level (the ul tag). Unfortunately, there's not a filter for the menu ul tags, so we'll need to create a new file in the \"inc\" folder called \"main-menu-walker.php\". In functions.php. copy the last require statement and paste it at the bottom of the file. Change the file name to main-menu-walker.php and change the comment to \"Load main menu walker\".\n\nIn the main-menu-walker.php file, we're going to create a simple class that only includes one method. This method replaces the one used by the default menu walker class used in WordPress and inserts the new classes in each menu and submenu. Here's the entire main-menu-walker.php file code:\n\n```php\n\u003C?php\n/**\n * Custom walker for adding a wrapper around submenus in the main menu\n *\n * @since  1.0.0\n * @package  Rosh\n * @subpackage  Rosh/classes\n */\nclass _s_Main_Menu_Walker extends Walker_Nav_Menu {\n    /**\n     * Adds classes to the each menu.\n     * Offsets the depth by one to allow for the top-level menu to be level 0.\n     *\n     * @see  Walker_Nav_Menu::end_lvl()\n     *\n     * @param  string  $output  Passed by reference. Used to append additional content.\n     * @param  int     $depth   Depth of menu item. Used for padding.\n     * @param  array   $args    An array of arguments. @see wp_nav_menu()\n     */\n    public function start_lvl(&$output, $depth = 0, $args = []) {\n        $indent = str_repeat(\"\\t\", $depth);\n        $offsetdepth = $depth + 1;\n        $output .= \"\\n$indent\u003Cul class=\\\"$args->menu_id-items $args->menu_id-items-$offsetdepth\\\">\\n\";\n   } // start_lvl()\n} // class\n```\n\nThe function adds two classes to each ul tag in the menus:\n\n- `{menu-name}`-items\n- `{menu-name}`-items-`{depth}`\n\nBefore we can optimize our stylesheet with all these new classes, open the header.php file and find the wp_nav_menu function call (around line 45). We need to tell the primary menu to use our new walker class and add two classes to the top-level ul tag. Add the following just after 'menu_id' => 'primary-menu' and save the files:\n\n```php\n, 'menu_class' => 'primary-menu-items primary-menu-items-0', 'walker' => new _s_Main_Menu_Walker()\n```\n\nAt this point, you should have classes that include the menu name and depth on each menu item list, menu item, and menu item link, allowing us to apply styles to the correct element using a few identifiers per selector as possible.\n\n### Change the Stylesheet\n\nSince we can now access each part of the menu directly with a class, lets look at what needs to change in the current stylesheet. Here are the rules we can change in the Menus section:\n\n```css\n* .main-navigation ul\n* .main-navigation li\n* .main-navigation a\n* .main-navigation ul ul\n* .main-navigation ul ul ul\n* .main-navigation ul ul a\n* .main-navigation ul ul li\n* .main-navigation li:hover > a,\n    .main-navigation li.focus > a\n* .main-navigation ul ul :hover > a,\n    .main-navigation ul ul .focus > a\n* .main-navigation ul ul a:hover,\n    .main-navigation ul ul a.focus\n* .main-navigation ul li:hover > ul,\n    .main-navigation ul li.focus > ul\n* .main-navigation ul ul li:hover > ul,\n    .main-navigation ul ul li.focus > ul\n* .main-navigation .current_page_item > a,\n    .main-navigation .current-menu-item > a,\n    .main-navigation .current_page_ancestor > a,\n    .main-navigation .current-menu-ancestor > a\n* @media screen and (min-width: 37.5em) { .main-navigation ul\n```\n\nWe're going change these, respectively, to:\n\n```css\n* .primary-menu-items\n* .primary-menu-item\n* .primary-menu-item-link\n* .primary-menu-items-0 ul\n* .primary-menu-items-1 ul\n* .primary-menu-items-1 a\n* .primary-menu-items-1 li\n* .primary-menu-item:hover > a,\n    .primary-menu-item.focus > a\n* .primary-menu-items-1 :hover > a,\n    .primary-menu-items-1 .focus > a\n* .primary-menu-items-1 a:hover,\n    .primary-menu-items-1 a.focus\n* .primary-menu-item:hover > ul,\n    .primary-menu-item.focus > ul\n* .primary-menu-item-1:hover > ul,\n    .primary-menu-item-1.focus > ul\n* .current_page_item > .primary-menu-item-link,\n    .current-menu-item > .primary-menu-item-link,\n    .current_page_ancestor > .primary-menu-item-link,\n    .current-menu-ancestor > .primary-menu-item-link\n* @media screen and (min-width: 37.5em) { .primary-menu-items\n```\n\nAs you can see, we can get now apply styles to elements deep in a menu without needing to add more identifiers to select them. This also allows us to get rid of qualifying identifiers like \".main-navigation ... \" because the menu name is now in a class in each item.\n\nA quick note about the numbering before we move on. Computers start counting at 0, rather than 1, so the top-level menu items will be level 0, the next level is 1, etc.\n\nHere are the results from our changes:\n\n- Total Stylesheet Size: 14405, up from 14344, but this expected since the class names are longer, therefore increase the byte size.\n- Total Identifiers: 350, down from 389\n- Identifiers Per Selector: 1.475, down from 1.6375\n- Specificity Per Selector: 8.566666666666666, down from 8.729166666666666\n\n## Wrapping Up\n\nWe've now performed the more difficult optimizations and seen the improvements in our Parker scores. In the [final post](/post/results-underscores-stylesheet/), we'll look back at our changes and see the overall improvement in our Parker scores. We'll also talk about where to go from there.","src/content/blog/simplifying-wordpress-menu-styling.mdx","c2b1868e7eab5262","simplifying-wordpress-menu-styling.mdx",{"id":268,"data":809,"body":822,"filePath":823,"digest":824,"legacyId":825,"deferredRender":25},{"category":810,"description":811,"heroAccount":812,"heroPhotographer":813,"pubDate":814,"relatedPosts":815,"title":821},[259],"Here are seven reasons why you should use the WordPress Plugin Boilerplate to make WordPress plugins in the second post in the series.","emilymorter","Emily Morter",["Date","2017-05-21T00:00:00.000Z"],[816,817,818,819,820],{"id":266,"collection":9},{"id":270,"collection":9},{"id":272,"collection":9},{"id":274,"collection":9},{"id":255,"collection":9},"Why Use the Boilerplate?","In the first post of the [WordPress Plugin Boilerplate series](/post/guide-using-wordpress-plugin-boilerplate/), we covered the history of the project. In this post, we're going to address a common question. The first question both new and experienced developers ask about the boilerplate is: why should I use this? The boilerplate describes itself as \"a standardized, organized, object-oriented foundation for building high-quality WordPress plugins.\" Here are at least five different ways the boilerplate helps when building plugins.\n\n## Organized\n\nWordPress plugins don't have a required structure. Many plugins are literally just one file. However, as a plugin gets more complex, better organization keeps it maintainable. The Boilerplate has an existing folder structure for keeping all the parts organized. While you're able to customize everything, the pre-existing structure offers a predictable format can make building plugins easier.\n\n## Object-Oriented\n\nEach class in the boilerplate separates the responsibilities of the methods and functionality. The included classes start with one public-facing object, one admin-facing object, and several classes used in either. You can see included examples to continue the good OOP practices in your custom classes.\n\n## WordPress Coding Standards\n\nThe boilerplate uses the WordPress Coding Standards. Seeing good examples can only help the code quality of plugins, especially for ones submitted to the plugin directory.\n\n## WordPress Documentation Standards\n\nOne of the best things you can do while building a plugin is document your code. The boilerplate uses the WordPress Documentation Standards and gives you plenty of really good examples of properly documenting code. I write my documentation to explain to my future self how the code works and why I wrote the code this particular way.\n\n## WordPress APIs\n\nOf course, the boilerplate uses standard WordPress APIs so the examples you find in the Codex and every WordPress code blog are still usable.Codex examples would require some minor alterations to work within the boilerplate. We'll go over those in detail as we build the WP Starter Plugin.\n\n## Translatable\n\nThe boilerplate includes a blank .pot file so you can add your translatable string easily. As WordPress becomes more popular outside the English-speaking community, making your plugin translatable increases the potential reach of your plugin.\n\n## Plugin Generator\n\nThe WordPress Plugin Boilerplate has a companion project - a plugin generator. The generator replaces the various strings and file names with your plugin's information so you don't have to do all this manually. Its a major head start. You can find the generator at [https://wppb.me/](https://wppb.me/).\n\n## Coming Next\n\nI hope you see the boilerplate can be a useful tool for building plugins. In the next post, we'll examine the files and folder structure.","src/content/blog/why-use-the-boilerplate.mdx","183c7c1eeeac5aba","why-use-the-boilerplate.mdx","what-is-react",{"id":826,"data":828,"body":833,"filePath":834,"digest":835,"legacyId":836,"deferredRender":25},{"category":829,"description":830,"draft":25,"heroAccount":765,"heroPhotographer":766,"pubDate":831,"title":832},[113],"Building interactive web-based applications with React is much simpler than using plan Javascript. So, what is React?",["Date","2022-07-29T00:00:00.000Z"],"What is React?","In my current position, I work with React instead of WordPress. To get this job, I worked hard to learn everything I could about React and the best practices at the time.\n\nIn this post, I want to share some things I’ve learned over the past few years of using it daily. But to do that, we have to start with the basics.\n\n## What Is React?\n\nReact is a declarative, component-based, JavaScript framework that uses a virtual DOM to reconcile state changes and optionally uses a templating language called JSX. Yeah, that’s a mouthful. Let’s break each of those things down so you can understand each one better.\n\n## Declarative\n\nDeclarative development is telling what to do rather than how to do it. It would be like going to a car dealer and telling the salesman you need a vehicle that is:\n\nwithin your budget\ncan seat five people\ncan show movies\n\nThey could bring you one of several possible vehicles:\n\na blue minivan with leather seats and an entertainment system for the back seats in your price range\na three-row SUV with screens built into the rear seats\na stretch limo with an entertainment system and disco ball\na rusty Sherman tank with a built-in DVD player.\n\nEither way, they bring you something that meets the requirements you specified.\n\nImperative development would be going to that same dealer and stating you want a blue minivan with leather seats and a DVD-based entertainment system. They bring that specific minivan, but it might be more than your budget.\n\nDeclarative development makes creating user interfaces simpler. You don't need to specify how and when things change. You state the final result; the framework handles the rest.\n\n## Components\n\nA component is a small, contained, reusable piece of functionality that builds more complex user interfaces. For instance, you use a TextField component as part of a form. The TextField can be used multiple times but contains everything it needs for a text field to work.\n\nHere's a simple component from the [React docs](https://reactjs.org/docs/components-and-props.html):\n\n```js\nfunction Welcome(props) {\n  return \u003Ch1>Hello, {props.name}\u003C/h1>;\n}\n```\n\nWhen used multiple times, this simple component creates something more complicated:\n\n```js\nfunction App() {\n  return (\n    \u003Cdiv>\n      \u003CWelcome name=\"Sara\" />\n      \u003CWelcome name=\"Cahal\" />\n      \u003CWelcome name=\"Edite\" />\n    \u003C/div>\n  );\n}\n```\n\nBuilding components is a core concept in React. One of the more difficult concepts I may cover later would be when to create a separate component versus a single component.\n\n## JavaScript framework\n\nJavascript, along with HTML and CSS, is one of the core languages used for building websites. It adds interactivity to web pages, allowing manipulation. While Javascript isn't difficult to learn, building web applications with it can be... well, complicated and hard to maintain. React simplifies complex things, allowing you to concentrate on building and innovating, not constantly managing state, handling user interactions, events, etc.\n\nHowever, when you publish a React app, it boils down to Javascript.\n\n## DOM and Virtual DOM\n\nThe [Virtual DOM](https://reactjs.org/docs/faq-internals.html) is one of the more complicated aspects of React. Understanding the browser DOM will help you understand the virtual DOM used by React.\n\n### DOM\n\nDOM stands for document object model. It is an object in memory that represents the web page structure. Having this in memory allows the web page to be manipulated or searched. Every web page has a DOM.\n\nReact uses a simulated (or virtual) DOM in memory to manage state changes before inserting them into the real DOM. Why does React do this, you ask? Two reasons:\n\nIt makes React declarative\nIt is much faster\n\n#### Declarative\n\nThe virtual DOM allows React to figure out how to get your app into the final state you asked for without needing you to specify how to get it that way. As mentioned above, this allows you to state the final result instead of every step to make the changes. As of React 16, React uses a system called React Fiber to reconcile differences between the virtual DOM and the browser DOM. If you're curious, you can read about React Fiber in this [unofficial documentation post](https://github.com/acdlite/react-fiber-architecture).\n\n#### Faster\n\nUpdating the browser DOM is slow because it involves calcuating all the necessary changes in the entire DOM. Web styles done with CSS cascade, which means changes in the upper part of the DOM tree could create different styling for elements lower in the DOM tree. Without advanced knowledge of these differences, the browser could paint items on the screen with the wrong styles and other issues. React uses the virtual DOM to pre-calculate all the changes and then updates the browser DOM.\n\nEvery time something changes in a React app a new virtual DOM gets created. React then compares the previous virtual DOM and the new virtual DOM to find the differences, also known as diffing. Then React finds the most efficient way to change the browser DOM so only the updated items are changed. React also puts together several changes at one time, known as batching, to make the performance of DOM changes faster. This entire process is known as reconciliation. In web-based React apps, the ReactDOM library handles reconciling the browser DOM changes.\n\n## JSX\n\nIf you have worked HTML, you are familiar with concepts like closing tags and self-closing tags. For example:\n\nClosing tag:\n\n```html\n\u003Cmain>\u003C/main\n```\n\nSelf-closing tag:\n\n```html\n\u003Cbr />\n```\n\nJSX makes creating React elements very similar to working with HTML elements. For example:\n\n```js\nconst ExampleComponent = \u003Cdiv>Here is example content\u003C/div>;\n```\n\nWhile it is possible to create React elements without JSX, I have yet to meet anyone who prefers this syntax:\n\n```js\nclass ExampleComponent extends React.Component {\n  render() {\n    return React.createElement(\"div\", null, `Here is example content`);\n  }\n}\n```\n\nNot using JSX is much more verbose and many shortcuts ultimately end up like JSX.\n\n## Conclusion\n\nReact makes writing interactive web-based apps simpler than doing the same in plain JavaScript. In my next post, we'll continue exploring components and JSX.","src/content/blog/what-is-react.mdx","387e8ea383908090","what-is-react.mdx",{"id":136,"data":838,"body":849,"filePath":850,"digest":851,"legacyId":852,"deferredRender":25},{"category":839,"description":840,"heroAccount":841,"heroPhotographer":842,"pubDate":843,"relatedPosts":844,"title":848},[127],"I'm doing another WordCamp presentation! This time, I'll be speaking about the WordPress Plugin Boilerplate at WordCamp Dayton 2015. Join me there!","morgasetrakand","Alex Grodkiewicz",["Date","2015-03-04T00:00:00.000Z"],[845,846,847],{"id":134,"collection":9},{"id":123,"collection":9},{"id":138,"collection":9},"WordCamp Dayton 2015","I've been accepted to speak at [WordCamp Dayton](https://dayton.wordcamp.org/2015/) this year! I'll be speaking on using [WordPress Plugin Boilerplate](https://wppb.me). I've been using the boilerplate for the past few months for all my plugins. I've found it extremely useful and well crafted. In my presentation, I'll be going over the basics of how it works, why you'd want to use it. I'll also show code for basic plugin things like widgets, metaboxes, post types, and plugin settings.\n\nLook forward to seeing you there!","src/content/blog/wordcamp-dayton-2015.mdx","2b7e224eec4e9c55","wordcamp-dayton-2015.mdx",{"id":422,"data":854,"body":866,"filePath":867,"digest":868,"legacyId":869,"deferredRender":25},{"category":855,"description":856,"heroAccount":857,"heroPhotographer":858,"pubDate":859,"relatedPosts":860,"title":864,"videoURL":865},[454,414,415],"Learn how to write comments in CSS to notate your styles.","pankajpatel","Pankaj Patel",["Date","2023-05-19T00:00:00.000Z"],[861,862,863],{"id":420,"collection":9},{"id":408,"collection":9},{"id":424,"collection":9},"Write Comments in CSS","https://www.youtube.com/watch?v=3RoH-XdHPXU","When it comes to writing clean and maintainable CSS code, comments play a crucial role in improving readability, collaboration, and long-term code management. By providing context, explanations, and reminders, comments help both current and future developers understand the purpose and functionality of the code. CSS comments can serve as notes for developers and have no impact on the appearance or behavior of the webpage.\n\nLet’s learn the syntax for CSS comments and where you can and cannot put comments in your stylesheets.\n\n\n## CSS Comment Syntax\n\nThe syntax for writing comments in CSS is the same for both single-line and multi-li e comments. They are enclosed between a forward slash and an asterisk (`/*`) to start the comment block and an asterisk and a forward slash (`*/`) to end the comment block.\n\nSingle-line example:\n```css\n.selector {\n    property: value; /* This is a single-line comment */\n}\n```\n\nMulti-line example:\n```css\n/* This is a multi-line comment\n   spanning multiple lines of code */\n.selector {\n    /* Commented out code\n       property: value;\n    */\n}\n```\n\nYou can learn more about CSS in the book [\"HTML and CSS: Design and Build Websites\"](https://amzn.to/3MmKSdt) by Jon Duckett.\n\n## Where can you put CSS comments\n\nThe following code sample shows all the valid ways to write comments in CSS, like:\n\n- On the line before the styles\n- On the line after the styles\n- Same line, before the declaration\n- Same line, after the declaration\n- Same line, in the middle of the declaration\n\n```css\n/* On the line before the styles */\np {\n  color: red; /* Same line, after the declaration */\n  /* Same line, before the declaration */ display: flex;\n  display: /* Same line, in the middle of the declaration */ flex;\n}\n/* On the line after the styles */\n```\n\n## Conclusion\n\nWell-crafted comments in CSS code can significantly enhance code readability, collaboration, and maintainability. By using single-line and multi-line comments effectively, you can provide essential context, explanations, and reminders to yourself and fellow developers.","src/content/blog/write-comments-in-css.mdx","6cd4f0d6060e91f0","write-comments-in-css.mdx",{"id":420,"data":871,"body":883,"filePath":884,"digest":885,"legacyId":886,"deferredRender":25},{"category":872,"description":873,"heroAccount":874,"heroPhotographer":875,"pubDate":876,"relatedPosts":877,"title":881,"videoURL":882},[658,414,415],"Learn the different ways to write comments in HTML , where you can and cannot put them, and how it can help you write code.","florianolv","Florian Olivo",["Date","2023-05-13T00:00:00.000Z"],[878,879,880],{"id":422,"collection":9},{"id":408,"collection":9},{"id":424,"collection":9},"Write Comments in HTML","https://www.youtube.com/watch?v=nBFt48cYwiM","HTML, the backbone of the web, offers a plethora of features to enhance the development process. One such powerful yet often underutilized feature is HTML comments. Let's explore the reasons why you should leverage HTML comments, the creative possibilities they offer, and how to use them effectively in your code.\n\n## Why Use HTML Comments?\n\n1. Experimentation: HTML comments serve as an excellent tool for experimentation. By commenting out blocks of code, you can easily try different ideas or alternative solutions without deleting the original code. This allows for a seamless and efficient trial-and-error process.\n\n2. Grouping Items: Comments in HTML can be used to organize your code and create logical groupings. By adding comments to your markup, you can easily navigate through complex structures and identify specific sections, making your code more readable and maintainable.\n\n3. Fun and Creativity: Beyond their practical applications, HTML comments provide a canvas for artistic expression, humor, or Easter eggs within your code. Developers often include jokes, poems, or hidden surprises, adding a touch of amusement and personalization to their work. Let's dive into some examples of funny comments that have amused programmers around the world:\n\n```html\n   \u003C!-- I have no idea why this works, but it does. -->\n   \u003C!-- Abandon all hope, ye who enter here. -->\n   \u003C!-- When I wrote this, only God and I understood what I was doing. Now, only God knows. -->\n   \u003C!-- Do not touch this code unless you're brave or completely insane. -->\n```\n\n## How to Write Comments in HTML\n\n### Basic Syntax - Single Line\n\nHTML comments follow a simple syntax, using `\u003C!--` to begin a comment and `-->` to end it. Here's an example of a single-line comment:\n\n```html\n   \u003C!-- This is a comment in HTML. -->\n```\n\n### Content within HTML Comments\n\nHTML comments can contain any text, characters, or even special characters like emojis. However, it's important to note that comments should be used for annotations and not for critical information intended for users or browsers.\n\n### Multi-line Syntax\n\nTo create multi-line comments, you can simply continue the comment across multiple lines. Here's an example:\n\n```html\n   \u003C!-- This is a multi-line\n        comment in HTML.\n        It can span across\n        multiple lines. -->\n```\n\nYou can learn more about HTML in the book [\"HTML and CSS: Design and Build Websites\"](https://amzn.to/3MmKSdt) by Jon Duckett.\n\n## Where You Can Put HTML Comments\n\nHTML comments can be placed anywhere within your markup. They can be inserted between HTML tags, before or after lines of code, or even within the `\u003Chead>` section of your document. Comments won't be rendered or affect the visual output of your webpage.\n\n```html\n\u003C!-- On the line before code -->\n\u003Cdiv class=\"example\">\n  \u003C!-- Before code, same line -->\u003Cp>Some content on the website.\u003C/p>\n  \u003Cp>Some content \u003C!-- Comment inside content --> on the website.\u003C/p>\n  \u003Cp>Some content on the website.\u003C/p>\u003C!-- After code, same line -->\n\u003C/div>\n\u003C!-- On the line after code -->\n```\n\n## Where Not to Put Comments\n\nWhile HTML comments are flexible, it's important to avoid placing comments within self-closing tags like `\u003Cimg>`, `\u003Cinput>`, or `\u003Cbr>`, as these tags do not support content and would break your HTML structure. You also cannot put them inside other tags or inside attributes.\n\n```html\n\u003Cdiv \u003C!-- Invalid comments inside a tag --> class=\"example\">\n  \u003Cp>Some content on the website.\u003C/p>\n  \u003Cp>Some content on the website.\u003C/p>\n  \u003Cp class=\"example \u003C!-- Invalid comments inside an attribute -->\">Some content on the website.\u003C/p>\n\u003C/div>\n```\n\n## Conclusion\n\nHTML comments are a valuable asset in web development, allowing for experimentation, organization, and even a touch of creativity. By using comments effectively, you can streamline your coding process, make your code more readable, and inject a bit of personality into your projects. So go ahead, unleash your imagination, and start leveraging the power of HTML comments in your web development endeavors.","src/content/blog/write-comments-in-html.mdx","fee69ae5226d97db","write-comments-in-html.mdx",{"id":134,"data":888,"body":899,"filePath":900,"digest":901,"legacyId":902,"deferredRender":25},{"category":889,"description":890,"heroAccount":891,"heroPhotographer":892,"pubDate":893,"relatedPosts":894,"title":898},[127],"I'm speaking at my first WordCamp! I'll be speaking on 'building your first widget' at Wordcamp Nashville 2013, join me there!","bjean05","Brandon Jean",["Date","2013-04-18T00:00:00.000Z"],[895,896,897],{"id":123,"collection":9},{"id":136,"collection":9},{"id":138,"collection":9},"WordCamp Nashville 2013","I'm excited to say I've been invited to speak at this year's WordCamp Nashville! I'll be speaking on Building Your First Widget and giving away from boilerplate code here on my site to get you started with building your first widget. I'll also post my slides here after Saturday's talk. I hope anyone near Nashville can come to [WordCamp](https://nashville.wordcamp.org/2013/), I'd love to meet you and we can all learn more about WordPress together!","src/content/blog/wordcamp-nashville-2013.mdx","b642a7d2f350dde8","wordcamp-nashville-2013.mdx","project",["Map",905,906,918,919,930,931,943,944,955,956],"gibble",{"id":905,"data":907,"body":914,"filePath":915,"digest":916,"legacyId":917,"deferredRender":25},{"cta":908,"description":909,"heroAccount":910,"heroPhotographer":911,"link":912,"name":913},"Visit the Gibble.TV site","Immerse yourself in the world of linguistic fun with this captivating game! Challenge your word-savvy skills by guessing five-letter words solely based on their phonetic spellings, providing an entertaining and educational experience for word enthusiasts of all ages!","shutters_guild","Travis Yewell","https://gibble.tv","Gibble.TV","Gibble.tv is a website related to a YouTube channel of the same name. Gibble helps people with special diets enjoying dining out by profiling allergen-friendly restaurants in major metro areas. There also some profiles of national chain restaurants as well.\n\n## Tech used\n* Astro\n* Tailwind","src/content/project/gibble.mdx","153190cc19708829","gibble.mdx","phonics",{"id":918,"data":920,"body":926,"filePath":927,"digest":928,"legacyId":929,"deferredRender":25},{"cta":921,"description":909,"heroAccount":922,"heroPhotographer":923,"link":924,"name":925},"Play Phonics","fabiosbruun","Fabio Santaniello Bruun","https://phonics.slushman.com","Phonics","Phonics gives you the phonetic spelling of a five-letter word. You have three guesses to figure out the word.\n\n## Tech used\n* React\n* Vite\n* TypeScript\n* Tailwind\n\n## Road Map (future plans)\n* Log in to save previous games\n* Possible expansion to include longer words\n* Add \"crazy mode\" where all the alternate spellings of each phonic are used instead of the phonetic\n\n## Change Log\n\n## 0.3\n* Convert from Create React App to Vite\n* Switch icons from icono to css.gg\n\n## 0.2\n* Add sharing sheet to share your score\n\n## 0.1\n* Initial version build with Create React App\n* Uses the five-letter word dictionary from Wordle\n* Uses icono for CSS-based icons","src/content/project/phonics.mdx","ccd2473d82ea8650","phonics.mdx","plates",{"id":930,"data":932,"body":939,"filePath":940,"digest":941,"legacyId":942,"deferredRender":25},{"cta":933,"description":934,"heroAccount":935,"heroPhotographer":936,"link":937,"name":938},"Play Plates","Turn every roadtrip into an exciting nationwide scavenger hunt with Plates! Track which license plates you see as you travel, competing with friends and family to see who can complete the ultimate license plate collection first!","devsnice","Semyon Borisov","https://plates.slushman.com","Plates","Plates helps track the license plates you see while on a roadtrip; used for the classic roadtrip license plate game.\n\nThe scores vary based on which state is selected. The larger the state, the fewer the points. License plates from other countries, like Mexico and Canada, as well as US Territories like Guam or Puerto Rico are worth more points. Native American tribe plates are worth the most points.\n\n## Tech used\n* React\n* TypeScript\n* Vite\n* Tailwind\n\n## Road Map (future plans)\n* Add pictures of each state's plate\n* Add all state plate variations. Add setting to track each variation separately\n* Change points based on the user's current location. States that are further away are worth more points\n* Log in to save previous games or sync a game across multiple users (like all family members in the same car)\n\n## Change Log\n\n### 0.2\n* Add sharing sheet to share your score\n* Scoring adjustments\n* Larger US states get 1 point and points increase as the US states get less populus\n* Alaska, Hawaii, US Territories, Canadian provinces, and Mexican states are all worth 10 points\n* All Native American tribe plates are worth 20\n\n### 0.1\n* Initial version\n* Includes lists of states for United States, Canada, Mexico, US Territories, and Native American tribes\n* Search and filter plates\n* Add \"Back to Top\" button","src/content/project/plates.mdx","1250092449997043","plates.mdx","wordle-solver",{"id":943,"data":945,"body":951,"filePath":952,"digest":953,"legacyId":954,"deferredRender":25},{"cta":946,"description":947,"heroAccount":948,"heroPhotographer":948,"link":949,"name":950},"Solve Wordle","Hopelessly stuck on Wordle? Got one row left? Get that 'Whew!' using this Wordle solver! Enter the letters you know about it will give you a list of the remaining words.","ostudio","https://wordle.slushman.com","Wordle Solver","The Wordle Solver helps you figure out what words could be played in Wordle. Enter known letters and mark potential and eliminated letters. Wordle Solver filters the remaining words based on your entries.\n\n## Tech used\n* React\n* TypeScript\n* Vite\n* Tailwind\n\n## Change Log\n\n### 0.2\n* Switch project to Vite\n* Simplify components, imports, and functions\n\n### 0.1\n* Initial version made with Create React App","src/content/project/wordle-solver.mdx","e751d6115e2e8425","wordle-solver.mdx","mapit",{"id":955,"data":957,"body":962,"filePath":963,"digest":964,"legacyId":965,"deferredRender":25},{"cta":958,"description":959,"link":960,"name":961},"Install MapIt!","Quickly open a map by selecting text or an address, right-clicking, and selecting MapIt! A new tab is opened in the mapping service you prefer.","https://chromewebstore.google.com/detail/mapit/ckddkgihaaljdkiilleepllgfhelliph","MapIt! Chrome Extension","A Chrome extension for quickly mapping a highlighted address. Users can choose from the following mapping services:\n* Google Maps™\n* Mapquest™\n* Bing™ maps\n* Zillow™\n* Google Earth™\n* OpenStreetMap™\n* HERE WeGo™\n* Apple Maps™ (only on macOS)\n\nHighlight the text (address, city/state, etc), right-click, then choose \"MapIt!\". A new tab will open and load the chosen mapping service displaying that location.","src/content/project/mapit.mdx","18c0ad1aec66ddb2","mapit.mdx"]